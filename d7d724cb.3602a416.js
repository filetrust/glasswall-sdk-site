(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{235:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(2),i=n(6),s=(n(0),n(277)),r={title:"2.1.7.1.1 API Overview",sidebar_label:"2.1.7.1.1 API Overview"},o={unversionedId:"2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_1-api/2_1_7_1_1-overview",id:"2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_1-api/2_1_7_1_1-overview",isDocsHomePage:!1,title:"2.1.7.1.1 API Overview",description:"Glossary",source:"@site/docs/2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_1-api/2_1_7_1_1-overview.md",slug:"/2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_1-api/2_1_7_1_1-overview",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_1-api/2_1_7_1_1-overview",version:"current",sidebar_label:"2.1.7.1.1 API Overview",sidebar:"someSidebar",previous:{title:"2.1.6.2 Versioning",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_1-glasswall_rebuild/2_1_6-build/2_1_6_2-versioning"},next:{title:"2.1.7.1.2 Configuration",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_1-api/2_1_7_1_2-configuration"}},l=[{value:"Glossary",id:"glossary",children:[]},{value:"Introduction",id:"introduction",children:[]},{value:"Code Examples",id:"code-examples",children:[]},{value:"Glasswall Technology",id:"glasswall-technology",children:[]},{value:"Types",id:"types",children:[{value:"Policy_format",id:"policy_format",children:[]},{value:"Analysis_format",id:"analysis_format",children:[]},{value:"ft_t",id:"ft_t",children:[]},{value:"Session",id:"session",children:[]}]},{value:"Return Types",id:"return-types",children:[]}],c={rightToc:l};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"glossary"},"Glossary"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(a.a)({parentName:"tr"},{align:null}),Object(s.b)("strong",{parentName:"th"},"Term")),Object(s.b)("th",Object(a.a)({parentName:"tr"},{align:null}),Object(s.b)("strong",{parentName:"th"},"Description")))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(s.b)("strong",{parentName:"td"},"Session")),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A session encapsulates the processing of a single file, specified either as a file path or a pointer to a memory image of the file.The session is given information regarding the required output of the session, the policies to be applied, and any other actions required.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(s.b)("strong",{parentName:"td"},"Base name")),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The base name refers to a path. It is the component left after all leading directory components have been removed. The base name can refer to a directory or file.")))),Object(s.b)("h2",{id:"introduction"},"Introduction"),Object(s.b)("p",null,"This documents the Application Programming Interface (API) within the Windows Dynamic Link Library glasswall.classic.dll and the Linux shared object libglasswall.classic.so."),Object(s.b)("p",null,"The API provides the following functionality:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"The production of reports detailing deep analysis of documents"),Object(s.b)("li",{parentName:"ul"},"The management of documents against a configurable content management policy"),Object(s.b)("li",{parentName:"ul"},"The force regeneration of documents against a configurable content management policy"),Object(s.b)("li",{parentName:"ul"},"The production of detailed process reporting"),Object(s.b)("li",{parentName:"ul"},"The modification of the content management policy")),Object(s.b)("p",null,"Where an API argument type is wchar_t, the argument must be converted to a wide character type before passing in to the API function."),Object(s.b)("p",null,"The code snippet below provides a framework showing how this might be done on a GNU/Linux system, where the default encoding of the file system is UTF-8 (which can be verified by using the locale(1P) command: locale charmap in a terminal window). For the purpose of the example below, a string literal in UTF-8 encoding has been used."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),'    /* Standard C headers */ \n#include <limits.h> \n#include <locale.h> \n#include <string.h> \n#include <stdio.h> \n#include <stdlib.h> \n\n    /* platform dependent headers */ \n#include <iconv.h> \n\n    /* define error handler to print message and exit */ \n#define handle_error(msg) \\ \n        do { perror(msg); exit(EXIT_FAILURE); } while (0) \n\nint main(void) \n{ \n    char path[PATH_MAX] = "testfile/test.doc";\n    char *ppath = path; \n\n    wchar_t wcpath[PATH_MAX * sizeof(wchar_t)];\n    wchar_t * const pwcpath_start = wcpath; /* iconv() changes param values; preserve \nstart address */\n    char *pwcpath = (char *)wcpath;\n\n    size_t bpathremain = strlen(ppath)+1;           /* bytes, path remaining; +1 to\ninclude terminating null character */\n    size_t bwcpathremain = (PATH_MAX) * sizeof(wchar_t); /* bytes, wide character path \nremaining */\n    size_t retval;\n    eGwFileStatus rv;\n\n        /* convert from UTF-8 to wchar_t for API interface */\n    iconv_t cd = iconv_open("WCHAR_T", "UTF-8");\n    if (cd == (iconv_t)-1)\n        handle_error("iconv_open() FAILED");\n\n    /* Set the locale for LC_CTYPE to the implementation-defined native locale\n     * so the way the print and scan functions declared in <stdlib.h> and <stdio.h> \n     * correctly parse and translate multibyte strings\n     */ \n    setlocale(LC_CTYPE, "");\n\n    /* convert the file name from UTF-8 string to wide character string */\n    retval = iconv(cd, &ppath, &bpathremain, &pwcpath, &bwcpathremain);\n\n    if (retval == (size_t)-1)\n        handle_error("iconv() FAILED");\n\n        /* set up the policy */\n    rv = GWFileConfigXML(cmPolicy);\n    if (rv != eGwFileStatus_Success) \n    {\n        fprintf(stderr, "pGWFileConfigXML() FAILED with status %d\\n", rv);\n        exit(EXIT_FAILURE);\n\n     }\n\n        /* process the file */\n     rv = GWFileToFileProtectAndReport(pwcpath_start, L"doc", L"/tmp/generatedfile.doc",\n L"/tmp/generatedfile.log");\n     if (rv != eGwFileStatus_Success)\n    {\n         fprintf(stderr, "pGWFileToFileProtectAndReport() FAILED with status %d\\n", rv); \n         exit(EXIT_FAILURE);\n    }\n\n         /* tidy up */\n    rv = GWFileDone();\n    if (rv != eGwFileStatus_Success)\n    {\n        fprintf(stderr, "pGWFileDone() FAILED with status %d\\n", rv);\n        exit(EXIT_FAILURE);\n    }\n\n    exit(EXIT_SUCCESS);\n} /* end of function main */\n')),Object(s.b)("h2",{id:"code-examples"},"Code Examples"),Object(s.b)("p",null,"Code information is shown in this font: code example"),Object(s.b)("p",null,"This monospace font differentiates code from normal text and avoids confusion with upper and lower case letters. For example, compare the code font ","'","lInfoFlag1","'"," with the normal font ","'","lInfoFlag1","'",". The upper case L and lower case l look the same in the normal font."),Object(s.b)("p",null,"Code examples are shown in a shaded box. For example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"#include &quot;glasswall.core2.api.h&quot;\nSession session = GW2OpenSession();\nif (!session)\n/\\* deal with error \\*/\nelse\n/\\* use session to refer to the session in other API function calls \\*/\n/\\* later \\*/\nif (GW2CloseSession(session))\n/\\* error closing session \\*/\n")),Object(s.b)("h2",{id:"glasswall-technology"},"Glasswall Technology"),Object(s.b)("p",null,"Glasswall provides deep-file inspection, remediation, sanitisation and reporting. The Glasswall API functions give third-party users the ability to fine-tune an interface to the Glasswall functionality."),Object(s.b)("h2",{id:"types"},"Types"),Object(s.b)("p",null,"The API makes available two enumerations for use by clients as argument types to certain API functions. Include the header file ",'"',"glasswall.core2.api.h",'"'," in your source file and use the enumerators when calling the API functions."),Object(s.b)("h3",{id:"policy_format"},"Policy","_","format"),Object(s.b)("p",null,"The enumeration Policy","_","format is used to specify the format of the policies file. The following enumerator is available:"),Object(s.b)("p",null,"PF","_","XML"),Object(s.b)("h3",{id:"analysis_format"},"Analysis","_","format"),Object(s.b)("p",null,"The enumeration Analysis","_","format is used to specify the format of the analysis file. The following enumerator is available:"),Object(s.b)("p",null,"AF","_","XML"),Object(s.b)("h3",{id:"ft_t"},"ft","_","t"),Object(s.b)("p",null,"The enumeration Ft","_","t is used to indicate the file type (file format) of a file. Include header file ",'"',"filetype.h",'"'," in your source code files to use them."),Object(s.b)("p",null,"Note: This is marked for change to ","'","Ft","_","t","'",". Examples in the document use ","'","Ft","_","t","'","."),Object(s.b)("h3",{id:"session"},"Session"),Object(s.b)("p",null,"Session is a type that represents a file and the mechanisms used to process that file. It is used by all Glasswall file processing A.P.I. functions."),Object(s.b)("p",null,"Note: This is marked for change to ","'","SessionHandle","'","."),Object(s.b)("h2",{id:"return-types"},"Return Types"),Object(s.b)("p",null,"Most of the functions in the Glasswall API return a value that indicates success or failure. The values and their meaning are listed below."),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(a.a)({parentName:"tr"},{align:null}),Object(s.b)("strong",{parentName:"th"},"Value")),Object(s.b)("th",Object(a.a)({parentName:"tr"},{align:null}),Object(s.b)("strong",{parentName:"th"},"Meaning")))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(s.b)("strong",{parentName:"td"},"-2")),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"End of file was detected unexpectedly.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(s.b)("strong",{parentName:"td"},"-1")),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Glasswall failed to process the file; general failure.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(s.b)("strong",{parentName:"td"},"0")),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The file was processed successfully; general success.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(s.b)("strong",{parentName:"td"},"1")),Object(s.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The file was processed successfully and cleaning was performed.")))),Object(s.b)("p",null,"Each of the functions described in \xa73 assumes that one of these values is returned unless stated otherwise in the detailed description."),Object(s.b)("h1",{id:"application-programming-interface"},"Application Programming Interface"),Object(s.b)("p",null,"The Application Programming Interface (API) is session based.  ",Object(s.b)("strong",{parentName:"p"},"Session"),"  is a type that represents a file and the mechanisms used to process that file. You create a  ",Object(s.b)("strong",{parentName:"p"},"Session"),"  object by calling  ",Object(s.b)("strong",{parentName:"p"},"GW2OpenSession"),"  which returns a session handle. You pass the session handle to other API functions to register the inputs and outputs, the forms of the inputs and outputs (memory or a file) and which processing mode is required (Analysis, Manage ","&"," Protect, Import, Export). You then process the file by calling function  ",Object(s.b)("strong",{parentName:"p"},"GW2RunSession"),"  and close the session calling  ",Object(s.b)("strong",{parentName:"p"},"GW2CloseSession")," , after processing any non-persistent storage, or saving non-persistent storage."),Object(s.b)("p",null,"The encapsulation of the processing of each file in a  ",Object(s.b)("strong",{parentName:"p"},"Session"),"  object allows multi-thread processing."),Object(s.b)("h1",{id:"summary-of-api-function-calls"},"Summary of API Function Calls"),Object(s.b)("p",null,"The table below lists all the Core 2 API registration functions. Each row specifies a File Storage Mode and Process Mode and the API functions to call to activate them for a session are indicated with ","'","Y","'",". The report file and policies can be applied to any mode, and an analysis report can be requested during Import and Export as well."),Object(s.b)("h1",{id:"summary-of-api-functions"},"Summary of API Functions"),Object(s.b)("p",null,"int GW2CloseSession(Session session);"),Object(s.b)("p",null,"ft","_","t GW2DetermineFileTypeFromFile(const char ","*","path);"),Object(s.b)("p",null,"ft","_","t GW2DetermineFileTypeFromMemory(const char ","*","inputFileBuffer, size","_","t inputLength);"),Object(s.b)("p",null,"int GW2FileErrorMsg(Session session, char ","*","*","errorMsgBuffer, size","_","t ","*","errorMsgBufferLength);"),Object(s.b)("p",null,"int GW2FileSessionStatus(Session session, int ","*","glasswallSessionStatus, char ","*","*","statusMsgBuffer, size","_","t ","*","statusbufferLength);"),Object(s.b)("p",null,"int GW2GetAllIdInfo(Session session, size","_","t ","*","bufferLength, char ","*","*","outputBuffer);"),Object(s.b)("p",null,"int GW2GetIdInfo(Session session, size","_","t issueId, size","_","t ","*","bufferLength, char ","*","*","outputBuffer);"),Object(s.b)("p",null,"int GW2GetPolicySettings(Session session, char ","*","*","policiesBuffer, size","_","t ","*","policiesLength, Policy","_","format format);"),Object(s.b)("p",null,"const char ","*","GW2LibVersion(void );"),Object(s.b)("p",null,"Session GW2OpenSession(void );"),Object(s.b)("p",null,"int GW2RegisterAnalysisFile(Session session, const char ","*","analysisFilePathName, Analysis","_","format format);"),Object(s.b)("p",null,"int GW2RegisterAnalysisMemory(Session session, char ","*","*","analysisFileBuffer, size","_","t ","*","analysisoutputLength, Analysis","_","format format);"),Object(s.b)("p",null,"int GW2RegisterExportFile(Session session, const char ","*","exportFilePath);"),Object(s.b)("p",null,"int GW2RegisterExportMemory(Session session, char ","*","*","exportFileBuffer, size","_","t ","*","exportLength);"),Object(s.b)("p",null,"int GW2RegisterImportFile(Session session, const char ","*","importFilePath);"),Object(s.b)("p",null,"int GW2RegisterImportMemory(Session session, char ","*","importFileBuffer, size","_","t importLength);"),Object(s.b)("p",null,"int GW2RegisterInputFile(Session session, const char ","*","inputFilePath);"),Object(s.b)("p",null,"int GW2RegisterInputMemory(Session session, const char ","*","inputFileBuffer, size","_","t inputLength);"),Object(s.b)("p",null,"int GW2RegisterOutFile(Session session, const char ","*","outputFilePath);"),Object(s.b)("p",null,"int GW2RegisterOutputMemory(Session session, char ","*","*","outputBuffer, size","_","t ","*","outputLength);"),Object(s.b)("p",null,"int GW2RegisterPoliciesFile(Session session, const char ","*","filename, Policy","_","format format);"),Object(s.b)("p",null,"int GW2RegisterPoliciesMemory(Session session, char ","*","policies, size","_","t policiesLength, Policy","_","format format);"),Object(s.b)("p",null,"int GW2RegisterReportFile(Session session, const char ","*","reportFilePathName);"),Object(s.b)("p",null,"int GW2RunSession(Session session);"))}p.isMDXComponent=!0},277:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,h=b["".concat(r,".").concat(d)]||b[d]||u[d]||s;return n?i.a.createElement(h,o(o({ref:t},c),{},{components:n})):i.a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<s;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);