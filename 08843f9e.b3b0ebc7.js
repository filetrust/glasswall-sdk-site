(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{279:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return b}));var n=r(0),a=r.n(n);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},h=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(r),h=n,b=u["".concat(i,".").concat(h)]||u[h]||d[h]||s;return r?a.a.createElement(b,l(l({ref:t},c),{},{components:r})):a.a.createElement(b,l({ref:t},c))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,i=new Array(s);i[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<s;c++)i[c]=r[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},60:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return l})),r.d(t,"rightToc",(function(){return o})),r.d(t,"default",(function(){return p}));var n=r(2),a=r(6),s=(r(0),r(279)),i={title:"2.1.7.2.3 C#",sidebar_label:"2.1.7.2.3 C#"},l={unversionedId:"2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_2-sdk_wrappers/2_1_7_2_3-c_sharp",id:"2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_2-sdk_wrappers/2_1_7_2_3-c_sharp",isDocsHomePage:!1,title:"2.1.7.2.3 C#",description:"Glasswall API Language Wrapper Documentation",source:"@site/docs/2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_2-sdk_wrappers/2_1_7_2_3-c_sharp.md",slug:"/2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_2-sdk_wrappers/2_1_7_2_3-c_sharp",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_2-sdk_wrappers/2_1_7_2_3-c_sharp",version:"current",sidebar_label:"2.1.7.2.3 C#",sidebar:"someSidebar",previous:{title:"2.1.7.2.2 JavaScript",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_2-sdk_wrappers/2_1_7_2_2-javascript"},next:{title:"2.1.7.2.4 Java",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_1-glasswall_rebuild/2_1_7-sdk/2_1_7_2-sdk_wrappers/2_1_7_2_4-java"}},o=[{value:"1.1 Issues to consider during implementation",id:"11-issues-to-consider-during-implementation",children:[]},{value:"2.1 Files provided",id:"21-files-provided",children:[]},{value:"2.2 Framework dependencies",id:"22-framework-dependencies",children:[]},{value:"2.3 Wrapper integration",id:"23-wrapper-integration",children:[]},{value:"2.4 Code example",id:"24-code-example",children:[]},{value:"2.5 Issues to consider",id:"25-issues-to-consider",children:[]}],c={rightToc:o};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(s.b)("div",{style:{textAlign:"center"}},Object(s.b)("h1",{id:"glasswall-api-language-wrapper-documentation"},"Glasswall API Language Wrapper Documentation"),Object(s.b)("h1",{id:"c"},"C#")),Object(s.b)("h1",{id:"1-introduction"},"1 Introduction"),Object(s.b)("p",null,"This is an introductory guide on how to use the C# language wrapper for the Glasswall API."),Object(s.b)("p",null,"For each language we have provided the following:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"The required dependencies and the target platform or framework required for the language. The mentioned platforms and frameworks are the ones that were used during testing, but other versions may or may not work."),Object(s.b)("li",{parentName:"ul"},"A general overview on integrating Glasswall into a project."),Object(s.b)("li",{parentName:"ul"},"A code example demonstrating how the Glasswall library can be used to process a directory of files. Each example shows the file being processed in Manage and Protect mode as well as being analysed in Analysis mode.")),Object(s.b)("h2",{id:"11-issues-to-consider-during-implementation"},"1.1 Issues to consider during implementation"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"The Glasswall library is not thread safe, which means that the language wrappers are not thread safe. This can be overcome by running the Glasswall library in a separate process."),Object(s.b)("li",{parentName:"ul"},"We recommend that the Glasswall library is run in a separate process in case unforeseen issues arise.")),Object(s.b)("h1",{id:"2-c"},"2 C#"),Object(s.b)("h2",{id:"21-files-provided"},"2.1 Files provided"),Object(s.b)("p",null,Object(s.b)("em",{parentName:"p"},"glasswall.classic.csharp.dll")," \u2013 The C# wrapper is provided as a .Net Framework Class Library that can be integrated into a project and used to interact with the Glasswall library. There are two OS specific versions of the library: one for the Windows OS and one for the Linux OS. Please ensure that you reference the correct version depending on your target platform otherwise you will get a DllNotFoundException when trying to interact with Glasswall."),Object(s.b)("h2",{id:"22-framework-dependencies"},"2.2 Framework dependencies"),Object(s.b)("p",null,"The C# wrapper requires the .Net Framework 4.5 to be installed or a Mono equivalent."),Object(s.b)("h2",{id:"23-wrapper-integration"},"2.3 Wrapper integration"),Object(s.b)("p",null,"The wrapper can be integrated into a project by simply adding a reference to the wrapper Library. The wrapper library uses the DllImport attribute to load the Glasswall library, which means that the Glasswall library needs to be in the search path in order to be executed. More information can be found at ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.mono-project.com/docs/advanced/pinvoke/"}),"https://www.mono-project.com/docs/advanced/pinvoke/")),Object(s.b)("h2",{id:"24-code-example"},"2.4 Code example"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-csharp"}),'using System;\nusing System.IO;\n\nusing GlasswallSolutions;\n\nnamespace glasswall.classic.csharp.testing\n{\n    class Program\n    {\n        public static void Main(string[] args)\n        {\n            string xmlConfigPath = args[0];    // The path to the XML content management configuration\n            string inputDirectory = args[1];   // The input directory\n            string outputDirectory = args[2];  // The output directory\n\n            // Print the Glasswall library version\n            Console.WriteLine("Library version: {0}", Glasswall.GWFileVersion());\n\n            Directory.CreateDirectory(outputDirectory);\n            string xmlConfig = File.ReadAllText(xmlConfigPath);\n\n            // Apply Content Management Configuration\n            if (Glasswall.GWFileConfigXML(xmlConfig) != 1)\n            {\n                // Print the failure reason\n                Console.WriteLine("Failed to load the XML config file: {0}", Glasswall.GWFileErrorMsg());\n                return;\n            }\n\n            foreach (string path in Directory.EnumerateFiles(inputDirectory, "*", SearchOption.AllDirectories))\n            {\n                Console.WriteLine("Processing file: {0}", path);\n                string outputPath = Path.Combine(outputDirectory, Path.GetFileNameWithoutExtension(path));\n\n                string extension = Path.GetExtension(path).Trim(\'.\'); // We use the file extension as the file type\n                int status = 0; // The file process status\n                byte[] fileProtect; // The buffer for the protected file\n\n                status = Glasswall.GWFileProtect(path, extension, out fileProtect); // Run the file through File to Memory Protect\n                PrintProcessInfo(status); // Print out the status\n                WriteAllBytes(outputPath + "." + extension, fileProtect); // Write the protected file\n\n                string analysisFile; // The analysis report\n                status = Glasswall.GWFileAnalysisAudit(path, extension, out analysisFile); // Analyse the file with File to Memory Analysis\n                PrintProcessInfo(status); // Print out the status\n                WriteAllText(outputPath + ".xml", analysisFile); // Write the analysis report\n            }\n\n            // Clean up any resources allocated by Glasswall\n            Glasswall.GWFileDone();\n        }\n\n        static void WriteAllBytes(string path, byte[] data)\n        {\n            if (data == null)   File.Create(path);\n            else                File.WriteAllBytes(path, data);\n        }\n\n        static void WriteAllText(string path, string data)\n        {\n            if (string.IsNullOrEmpty(data)) File.Create(path);\n            else                            File.WriteAllText(path, data);\n        }\n\n        static void PrintProcessInfo(int fileProcessStatus)\n        {\n            uint processStatus = 0;\n            \n            Glasswall.GWFileProcessStatus(ref processStatus); // Get the process status\n            Console.WriteLine("Process status: {0}", processStatus);\n            Console.WriteLine("Process message: {0}", Glasswall.GWFileProcessMsg()); // Print the file process message\n\n            if (fileProcessStatus != 1) Console.WriteLine("Glasswall error: {0}", Glasswall.GWFileErrorMsg()); // Print non-conformance reason\n        }\n    }\n}\n\n\n')),Object(s.b)("h2",{id:"25-issues-to-consider"},"2.5 Issues to consider"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Very large files can potentially cause Out of Memory Exceptions to occur when running in File to Memory mode. This is due to certain results being returned as byte arrays. Potential remedy is to process files in File to File mode."),Object(s.b)("li",{parentName:"ul"},"In very exceptional circumstances certain PDF documents may cause a StackOverflowException to occur. This can be mitigated by increasing the stack size of the application.")))}p.isMDXComponent=!0}}]);