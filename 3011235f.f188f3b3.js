(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{236:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return d}));var n=r(0),i=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=i.a.createContext({}),p=function(e){var t=i.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},b=function(e){var t=p(e.components);return i.a.createElement(u.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},s=i.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),b=p(r),s=n,d=b["".concat(o,".").concat(s)]||b[s]||f[s]||a;return r?i.a.createElement(d,l(l({ref:t},u),{},{components:r})):i.a.createElement(d,l({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=s;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var u=2;u<a;u++)o[u]=r[u];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,r)}s.displayName="MDXCreateElement"},95:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return l})),r.d(t,"rightToc",(function(){return c})),r.d(t,"default",(function(){return p}));var n=r(2),i=r(6),a=(r(0),r(236)),o={title:"Bin directory reader"},l={unversionedId:"artifacts/BinDirectoryReader",id:"artifacts/BinDirectoryReader",isDocsHomePage:!1,title:"Bin directory reader",description:"\\section Author",source:"@site/docs/artifacts/BinDirectoryReader.md",slug:"/artifacts/BinDirectoryReader",permalink:"/glasswall-sdk-site/docs/artifacts/BinDirectoryReader",version:"current"},c=[{value:"Options to include:",id:"options-to-include",children:[]},{value:"Operation",id:"operation",children:[]}],u={rightToc:c};function p(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"\\section Author\nSteven Warner,\nRoman Danilov"),Object(a.b)("p",null,"\\section Description\nTests directory full of files against a BDDL definition as a way of confirming that it will generate identical file once translated to C++."),Object(a.b)("p",null,"\\section Location\nScripts can be found at the following location in TFS"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"inhouse.tools","\\","GWBinaryAnalysisTools","\\","BinDirectoryReader")),Object(a.b)("p",null,"\\section Usage"),Object(a.b)("h1",{id:"requirements-of-bindirectoryreader"},"Requirements of BinDirectoryReader"),Object(a.b)("p",null,"Take BinReader Example from Miraplacid as base."),Object(a.b)("p",null,'Add means of taking options from the commandline in the form "-option value"'),Object(a.b)("h2",{id:"options-to-include"},"Options to include:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Name of filepath ")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"where search for files will start and work down recursively e.g. c:\\file_archive\\docfiles")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Name of file or wildcard")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"full name of file to find instances of in the search or partial filename with wildcards\ne.g. sttb.bin or plc*.bin or wordcorestreams.bin")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Name of BDDL schema to parse")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"full filepath and name for the schema that matches the binary files being sought")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Output path for rebuilt binaries")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Output path for debug files")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"Option to generate rebuilt binaries even if unrequired"))),Object(a.b)("h2",{id:"operation"},"Operation"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Load the options"),Object(a.b)("li",{parentName:"ul"},"Load the schema file and asks the Miraplacid SDK (MP) to try to parse it. Stops with error if that fails."),Object(a.b)("li",{parentName:"ul"},"Start searching the directory for the matching files."),Object(a.b)("li",{parentName:"ul"},"Foreach binary file ...",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Get MP to try to parse the file into a MP Binary DOM tree. Skip to next file with error if that fails, with output of reason for failure. "),Object(a.b)("li",{parentName:"ul"},"If the file loads into the BinDOM tree, get MP to rewrite the tree to a binary form into a memorybuffer (memorystream/bytearray) and comparing it to the original\nbinary file that was input.\nIf that does not match, report the error and output the created binary file to the output path for rebuilt binaries\n(prepended with the full path for the original file minus the leading drive name)"),Object(a.b)("li",{parentName:"ul"},"If required by options (Option to generate rebuilt binaries even if unrequired),\noutput the recreated binary file to the output path for rebuilt binaries regardless of whether it passed\n(prepended with the full path for the original file minus the leading drive name)"),Object(a.b)("li",{parentName:"ul"},"If required by options (Output path for debug files),\nOutput the debug report for the file - generated by MP in the form of a text version of the files' tree structure.")))))}p.isMDXComponent=!0}}]);