(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{122:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return d}));var i=n(2),r=n(6),l=(n(0),n(280)),a={title:"3.11.2 Clone, Rebuild and Debug Editor in Windows",sidebar_label:"3.11.2 Clone, Rebuild and Debug Editor in Windows"},o={unversionedId:"3-guides/3_11-clone_build_debug_engines/3_11_2-editor_windows",id:"3-guides/3_11-clone_build_debug_engines/3_11_2-editor_windows",isDocsHomePage:!1,title:"3.11.2 Clone, Rebuild and Debug Editor in Windows",description:"`",source:"@site/docs/3-guides/3_11-clone_build_debug_engines/3_11_2-editor_windows.md",slug:"/3-guides/3_11-clone_build_debug_engines/3_11_2-editor_windows",permalink:"/glasswall-sdk-site/docs/3-guides/3_11-clone_build_debug_engines/3_11_2-editor_windows",version:"current",sidebar_label:"3.11.2 Clone, Rebuild and Debug Editor in Windows",sidebar:"someSidebar",previous:{title:"3.11.1 Clone, Rebuild and Debug Editor in Linux",permalink:"/glasswall-sdk-site/docs/3-guides/3_11-clone_build_debug_engines/3_11_1-editor_linux"},next:{title:"3.11.3 Clone, Rebuild and Debug Rebuild in Linux",permalink:"/glasswall-sdk-site/docs/3-guides/3_11-clone_build_debug_engines/3_11_3-rebuild_linux"}},b=[{value:"0. Introduction",id:"0-introduction",children:[]},{value:"1. Fetching the Code Base",id:"1-fetching-the-code-base",children:[]},{value:"2. Building Rebuild",id:"2-building-rebuild",children:[]},{value:"3. Using GWQtCLI",id:"3-using-gwqtcli",children:[{value:"3.1 Get GWQtCLI from Azure DevOps",id:"31-get-gwqtcli-from-azure-devops",children:[]},{value:"3.2 Build GWQtCLI",id:"32-build-gwqtcli",children:[]},{value:"3.2 Place GWQtCLI",id:"32-place-gwqtcli",children:[]},{value:"3.3 Using Run Configurations",id:"33-using-run-configurations",children:[]}]}],c={rightToc:b};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{}),"------------------------------------------------------------------------\nFILE NAME: editor_windows.md\nDATE: 2021-03-03 16:50 [+0000]\nAUTHOR: Martin O'Brien\nCOPYRIGHT GLASSWALL SOLUTIONS LIMITED\n------------------------------------------------------------------------\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"#windows-editor"}),"Windows Editor"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"#0-introduction"}),"0. Introduction")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"#1-fetching-the-code-base"}),"1. Fetching the Code Base")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"#2-building-rebuild"}),"2. Building Rebuild")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"#3-using-gwqtcli"}),"3. Using GWQtCLI"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"#31-get-gwqtcli-from-azure-devops"}),"3.1 Get GWQtCLI from Azure DevOps")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"#32-build-gwqtcli"}),"3.2 Build GWQtCLI")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"#32-place-gwqtcli"}),"3.2 Place GWQtCLI")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",Object(i.a)({parentName:"li"},{href:"#33-using-run-configurations"}),"3.3 Using Run Configurations"))))))),Object(l.b)("h1",{id:"windows-editor"},"Windows Editor"),Object(l.b)("h2",{id:"0-introduction"},"0. Introduction"),Object(l.b)("p",null,"This guide explaines how to clone, build and debug Editor on a Windows platform."),Object(l.b)("h2",{id:"1-fetching-the-code-base"},"1. Fetching the Code Base"),Object(l.b)("p",null,"Fetch the code base from Azure DevOps by typing "),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{}),"$ git clone https://glasswall@dev.azure.com/glasswall/Glasswall%20Core/_git/sdk.editor\n")),Object(l.b)("h2",{id:"2-building-rebuild"},"2. Building Rebuild"),Object(l.b)("p",null,"Launch Qt Creator then use ",Object(l.b)("strong",{parentName:"p"},"File")," > ",Object(l.b)("strong",{parentName:"p"},"Open File or Project")," > ",Object(l.b)("inlineCode",{parentName:"p"},"src\\core2.pro"),"."),Object(l.b)("p",null,"This will open the Core 2 project. Then you can Press ",Object(l.b)("strong",{parentName:"p"},"Ctrl B")," to build the project. This will create directory ",Object(l.b)("inlineCode",{parentName:"p"},"build-core2-Desktop_Qt_5_9_9_MSVC2017_64bit-Debug\\")," and under that ",Object(l.b)("inlineCode",{parentName:"p"},"buildoutput"),". In there it will place file ",Object(l.b)("inlineCode",{parentName:"p"},"glasswall_core2d.dll"),". The ",Object(l.b)("inlineCode",{parentName:"p"},"d")," denotes a debug version of the file. ",Object(l.b)("inlineCode",{parentName:"p"},"glasswall_core2.dll")," is the release version."),Object(l.b)("h2",{id:"3-using-gwqtcli"},"3. Using GWQtCLI"),Object(l.b)("h3",{id:"31-get-gwqtcli-from-azure-devops"},"3.1 Get GWQtCLI from Azure DevOps"),Object(l.b)("p",null,"You need ",Object(l.b)("inlineCode",{parentName:"p"},"GWQtCLI.exe")," to use the Glasswall DLL. Go to the ",Object(l.b)("a",Object(i.a)({parentName:"p"},{href:"https://dev.azure.com/glasswall/Glasswall%20Core/_build?definitionId=485&_a=summary"}),"Editor CLI")," pipeline, click on the latest non-zero build (that is, the newest build that is not #0.0) then click ",Object(l.b)("inlineCode",{parentName:"p"},"Published")," (e.g., ",Object(l.b)("inlineCode",{parentName:"p"},"2 Published")," at the top). In the next page select ",Object(l.b)("inlineCode",{parentName:"p"},"windows-drop"),", then download the executable, ",Object(l.b)("inlineCode",{parentName:"p"},"GWQtCLI.exe"),"."),Object(l.b)("h3",{id:"32-build-gwqtcli"},"3.2 Build GWQtCLI"),Object(l.b)("p",null,"You can build GWQtCLI by cloning from Azure Devops:"),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{}),"$ git clone  https://glasswall@dev.azure.com/glasswall/Glasswall%20Core/_git/editor.cli\n")),Object(l.b)("p",null,"then loading ",Object(l.b)("inlineCode",{parentName:"p"},"GWQtCLI.pro")," from the ",Object(l.b)("inlineCode",{parentName:"p"},"src")," directory in Qt Creator and building. The executable will be in ","[TODO]"),Object(l.b)("h3",{id:"32-place-gwqtcli"},"3.2 Place GWQtCLI"),Object(l.b)("p",null,"Place ",Object(l.b)("inlineCode",{parentName:"p"},"GWQtCLI.exe")," in the ",Object(l.b)("inlineCode",{parentName:"p"},"buildoutput")," directory, for example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{}),"c:\\DevOps\\sdk.editor\\build-core2-Desktop_Qt_5_9_9_MSVC2017_64bit-Debug\\buildoutput\n")),Object(l.b)("h3",{id:"33-using-run-configurations"},"3.3 Using Run Configurations"),Object(l.b)("p",null,"You can set run configurations to implement different functionality with ",Object(l.b)("inlineCode",{parentName:"p"},"GWQtCLI.exe"),". For example, you can create a simple ",Object(l.b)("em",{parentName:"p"},"help")," configuration. More useful would be configurations for export, import, manage, and wordsearch."),Object(l.b)("p",null,"In the mode selector area select ",Object(l.b)("em",{parentName:"p"},"Projects")," then under ",Object(l.b)("strong",{parentName:"p"},"Build & Run")," select ",Object(l.b)("strong",{parentName:"p"},"Build"),"."),Object(l.b)("p",null,"In the ",Object(l.b)("strong",{parentName:"p"},"Run")," section, ",Object(l.b)("strong",{parentName:"p"},"Run configuration"),", select ",Object(l.b)("strong",{parentName:"p"},"Add")," > ",Object(l.b)("strong",{parentName:"p"},"Custom Executable"),". Then click ",Object(l.b)("strong",{parentName:"p"},"Rename")," and give the configuration a sensible name (initially I create ",Object(l.b)("em",{parentName:"p"},"GWQtCLI help")," to indicate I'm using the ",Object(l.b)("inlineCode",{parentName:"p"},"--help")," option):"),Object(l.b)("pre",null,Object(l.b)("code",Object(i.a)({parentName:"pre"},{}),"Executable:               C:\\DevOps\\sdk.editor\\build-core2-Desktop_Qt_5_9_9_MSVC2017_64bit-Debug\\buildoutput\\GWQtCLI.exe\nCommand line arguments:   --help\nWorking directory:        C:\\DevOps\\sdk.editor\\build-core2-Desktop_Qt_5_9_9_MSVC2017_64bit-Debug\\buildoutput\n")),Object(l.b)("p",null,"Other useful command line arguments are:"),Object(l.b)("p",null,"export: ",Object(l.b)("inlineCode",{parentName:"p"},"-i INPUT_DIR -o OUTPUT_DIR -l -x export"),Object(l.b)("br",null),"\nimport: ",Object(l.b)("inlineCode",{parentName:"p"},"-i INPUT_DIR -o OUTPUT_DIR -l -x import"),Object(l.b)("br",null),"\nmanage: ",Object(l.b)("inlineCode",{parentName:"p"},"-i INPUT_DIR -o OUTPUT_DIR -l"),Object(l.b)("br",null),"\nwordsearch: ",Object(l.b)("inlineCode",{parentName:"p"},"-i INPUT_DIR -o OUTPUT_DIR -c PROFILES_FILE -g HOMOGLYPHS_FILE -l"),Object(l.b)("br",null)),Object(l.b)("p",null,"To shorten the arguments to the options, you can place the input directory, the profiles file, and the homoglyphs file in the ",Object(l.b)("inlineCode",{parentName:"p"},"buildoutput")," directory."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"PENDING ADDITION TO THIS DOCUMENT Steve Warner to clarify"),Object(l.b)("br",null),"\nPlace the latest ",Object(l.b)("inlineCode",{parentName:"p"},"glasswall.classic.pdf.dll")," in the ",Object(l.b)("inlineCode",{parentName:"p"},"buildoutput")," directory. It is a copy of ",Object(l.b)("inlineCode",{parentName:"p"},"glasswall.classic.dll"),". Fetch this from the ",Object(l.b)("inlineCode",{parentName:"p"},"sdk.rebuild")," windows-drop pipeline."),Object(l.b)("p",null,"--- End of file editor-windows.md ---"))}d.isMDXComponent=!0},280:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return O}));var i=n(0),r=n.n(i);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),d=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=d(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,a=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),u=d(n),s=i,O=u["".concat(a,".").concat(s)]||u[s]||p[s]||l;return n?r.a.createElement(O,o(o({ref:t},c),{},{components:n})):r.a.createElement(O,o({ref:t},c))}));function O(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=s;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var c=2;c<l;c++)a[c]=n[c];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);