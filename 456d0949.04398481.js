(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{132:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return c}));var a=n(2),r=n(6),i=(n(0),n(290)),l={title:"2.2.6.1.4.4 Examples",sidebar_label:"2.2.6.1.4.4 Examples"},o={unversionedId:"2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_4-wordsearch/2_2_6_1_4_4-exampleuseage",id:"2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_4-wordsearch/2_2_6_1_4_4-exampleuseage",isDocsHomePage:!1,title:"2.2.6.1.4.4 Examples",description:"Here we have an example C++ application that takes an input file, processes it using the Glasswall Word Search engine, and then produces an output file alongside a word search analysis report. This example application expects the following commandline parameters:",source:"@site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_4-wordsearch/2_2_6_1_4_4-exampleuseage.md",slug:"/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_4-wordsearch/2_2_6_1_4_4-exampleuseage",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_4-wordsearch/2_2_6_1_4_4-exampleuseage",version:"current",sidebar_label:"2.2.6.1.4.4 Examples",sidebar:"someSidebar",previous:{title:"2.2.6.1.4.3 XSD",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_4-wordsearch/2_2_6_1_4_3-wordsearchXSD"},next:{title:"2.2.6.1.5.1 Archive Manager",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_5-archivemanager/2_2_6_1_5_1-archive-manager"}},s=[],u={rightToc:s};function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Here we have an example C++ application that takes an input file, processes it using the Glasswall Word Search engine, and then produces an output file alongside a word search analysis report. This example application expects the following commandline parameters:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Path to the content management configuration XML."),Object(i.b)("li",{parentName:"ol"},"Path to the homoglyphs file."),Object(i.b)("li",{parentName:"ol"},"Path to the input file to be processed."),Object(i.b)("li",{parentName:"ol"},"Path to the output file where the processed file will be stored.")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),'#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <cstddef>\n#include <stdexcept>\n\n#include "api.h"\n\nusing namespace std;\n\n// Read the file into a buffer\nvector<uint8_t> readFile(ifstream &fileHandle, const string &filePath, bool nullTerminator)\n{\n    fileHandle.exceptions(ifstream::failbit | ifstream::badbit);\n    fileHandle.open(filePath.c_str(), ios::binary | ios::ate);\n\n    vector<uint8_t> data;\n    streamsize size = fileHandle.tellg();\n    fileHandle.seekg(0, ios::beg);\n\n    data.resize(size + 1);\n    fileHandle.read(reinterpret_cast<char *>(data.data()), size);\n\n    if (nullTerminator)\n    {\n        data.push_back(0);\n    }\n\n    return data;\n}\n\nint main(int argc, char **argv)\n{\n    if (argc != 5)\n    {\n        cout << "Usage: <Path to XML Config> <Path to Homoglyphs> <Input file> <Output file>" << endl;\n        return -1;\n    }\n\n    // Read commandline arguments\n    string xmlFilePath(argv[1]);\n    string homoglyphsFilePath(argv[2]);\n    string inputFilePath(argv[3]);\n    string outputFilePath(argv[4]);\n\n    // Create file handles for input files\n    ifstream xmlFileHandle;\n    ifstream homoglyphsFileHandle;\n    ifstream inputFileHandle;\n\n    // Read files into buffers\n    vector<uint8_t> xmlBuffer = readFile(xmlFileHandle, xmlFilePath, true);                         // Buffer containing the XML content management settings. This is null terminated\n    vector<uint8_t> homoglyphsBuffer = readFile(homoglyphsFileHandle, homoglyphsFilePath, true);    // Buffer containing the homoglyphs. This is null terminated\n    vector<uint8_t> inputBuffer = readFile(inputFileHandle, inputFilePath, false);                  // Buffer containing the input file to be processed\n\n    // Create variables for output buffers\n    void * outputBuffer = nullptr;          // Output buffer for processed file\n    size_t outputBufferSize = 0;            // Output buffer size\n    void * outputReportBuffer = nullptr;    // Output buffer for report file\n    size_t outputReportBufferSize = 0;      // Output report buffer size\n\n    // Run word search and redact\n    Status status = GwWordSearch(inputBuffer.data(), inputBuffer.size(), &outputBuffer, &outputBufferSize, &outputReportBuffer, &outputReportBufferSize, reinterpret_cast<const char*>(homoglyphsBuffer.data()), reinterpret_cast<const char *>(xmlBuffer.data()));\n\n    if (status == Status::eSuccess)\n    {\n        // Write out the processed output file if the word search and redact was successful\n        ofstream outputFileHandle(outputFilePath, ios::binary | ios::trunc);\n\n        if (outputFileHandle.is_open())\n        {\n            outputFileHandle.write(static_cast<const char *>(outputBuffer), outputBufferSize);\n        }\n\n        outputFileHandle.close();\n    }\n\n    // Write out the report file\n    ofstream analysisFileHandle(outputFilePath + ".xml", ios::binary | ios::trunc);\n\n    if (analysisFileHandle.is_open())\n    {\n        analysisFileHandle.write(static_cast<const char *>(outputReportBuffer), outputReportBufferSize);\n    }\n\n    analysisFileHandle.close();\n\n    // Call done to release any allocated resources\n    GwWordSearchDone(&outputBuffer, &outputBufferSize, &outputReportBuffer, &outputReportBufferSize);\n\n    return 0;\n}\n')),Object(i.b)("p",null,'In this example we are searching for the text "cats" and allowing it, searching for the regular expression "l\\S+e" and redacting it, and searching for the text "hello" and disallowing it. The ',Object(i.b)("inlineCode",{parentName:"p"},"textSetting")," element accepts the following options:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"allow")," - Allowing an item will not apply redaction, but will mention the item in the word search report if it is found"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"disallow")," - Disallowing an item will flag the document as non-conforming if the item is found"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"redact"),' - Redacting an item will replace the text with the replacement character specified. For example, "cats" will be replaced with "****"')))}c.isMDXComponent=!0},290:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return _}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),c=function(e){var t=r.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,_=p["".concat(l,".").concat(d)]||p[d]||f[d]||i;return n?r.a.createElement(_,o(o({ref:t},u),{},{components:n})):r.a.createElement(_,o({ref:t},u))}));function _(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);