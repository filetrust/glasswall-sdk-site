(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{280:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return O}));var i=t(0),l=t.n(i);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function b(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var u=l.a.createContext({}),c=function(e){var n=l.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):b(b({},n),e)),t},d=function(e){var n=c(e.components);return l.a.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},s=l.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,r=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),s=i,O=d["".concat(r,".").concat(s)]||d[s]||p[s]||a;return t?l.a.createElement(O,b(b({ref:n},u),{},{components:t})):l.a.createElement(O,b({ref:n},u))}));function O(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=s;var b={};for(var o in n)hasOwnProperty.call(n,o)&&(b[o]=n[o]);b.originalType=e,b.mdxType="string"==typeof e?e:i,r[1]=b;for(var u=2;u<a;u++)r[u]=t[u];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,t)}s.displayName="MDXCreateElement"},59:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return b})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return c}));var i=t(2),l=t(6),a=(t(0),t(280)),r={title:"3.11.3 Clone, Rebuild and Debug Rebuild in Linux",sidebar_label:"3.11.3 Clone, Rebuild and Debug Rebuild in Linux"},b={unversionedId:"3-guides/3_11-clone_build_debug_engines/3_11_3-rebuild_linux",id:"3-guides/3_11-clone_build_debug_engines/3_11_3-rebuild_linux",isDocsHomePage:!1,title:"3.11.3 Clone, Rebuild and Debug Rebuild in Linux",description:"`",source:"@site/docs/3-guides/3_11-clone_build_debug_engines/3_11_3-rebuild_linux.md",slug:"/3-guides/3_11-clone_build_debug_engines/3_11_3-rebuild_linux",permalink:"/glasswall-sdk-site/docs/3-guides/3_11-clone_build_debug_engines/3_11_3-rebuild_linux",version:"current",sidebar_label:"3.11.3 Clone, Rebuild and Debug Rebuild in Linux",sidebar:"someSidebar",previous:{title:"3.11.2 Clone, Rebuild and Debug Editor in Windows",permalink:"/glasswall-sdk-site/docs/3-guides/3_11-clone_build_debug_engines/3_11_2-editor_windows"},next:{title:"3.11.4 Clone, Rebuild and Debug Rebuild in Windows",permalink:"/glasswall-sdk-site/docs/3-guides/3_11-clone_build_debug_engines/3_11_4-rebuild_windows"}},o=[{value:"0. Introduction",id:"0-introduction",children:[]},{value:"1. Fetching the Code Base",id:"1-fetching-the-code-base",children:[]},{value:"2. Building Rebuild",id:"2-building-rebuild",children:[]},{value:"3. Debugging Rebuild",id:"3-debugging-rebuild",children:[]},{value:"4. Running Rebuild",id:"4-running-rebuild",children:[]},{value:"5. Build",id:"5-build",children:[]},{value:"6. Run glasswallCLI",id:"6-run-glasswallcli",children:[]}],u={rightToc:o};function c(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"------------------------------------------------------------------------\nFILE NAME: rebuild_linux.md\nDATE: 2021-03-03 13:56 [+0000]\nAUTHOR: Martin O'Brien\nCOPYRIGHT 2021 GLASSWALL SOLUTIONS LIMITED\n------------------------------------------------------------------------\n")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"#linux-rebuild"}),"Linux Rebuild"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"#0-introduction"}),"0. Introduction")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"#1-fetching-the-code-base"}),"1. Fetching the Code Base")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"#2-building-rebuild"}),"2. Building Rebuild")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"#3-debugging-rebuild"}),"3. Debugging Rebuild")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"#4-running-rebuild"}),"4. Running Rebuild")))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"#quick-view"}),"Quick View"),Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"#5-build"}),"5. Build")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(i.a)({parentName:"li"},{href:"#6-run-glasswallcli"}),"6. Run glasswallCLI"))))),Object(a.b)("h1",{id:"linux-rebuild"},"Linux Rebuild"),Object(a.b)("p",null,"Note, this should be called GNU/Linux. Linux on its own is not much use to most people."),Object(a.b)("p",null,"If you want a summary of how how to do this, refer to the ",Object(a.b)("a",Object(i.a)({parentName:"p"},{href:"#quick-view"}),"Quick View")," section below."),Object(a.b)("h2",{id:"0-introduction"},"0. Introduction"),Object(a.b)("p",null,"This guide explaines how to clone, build and debug Rebuild on a GNU/Linux platform."),Object(a.b)("h2",{id:"1-fetching-the-code-base"},"1. Fetching the Code Base"),Object(a.b)("p",null,"Fetch the code base from Azure DevOps by typing "),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"$ git clone https://glasswall@dev.azure.com/glasswall/Glasswall%20Core/_git/sdk.rebuild\n")),Object(a.b)("h2",{id:"2-building-rebuild"},"2. Building Rebuild"),Object(a.b)("p",null,"To build Rebuild, use Bash script file ",Object(a.b)("inlineCode",{parentName:"p"},"build-linux-debug.sh"),". This should be run from directory ",Object(a.b)("inlineCode",{parentName:"p"},"src/code")," which contains the file ",Object(a.b)("inlineCode",{parentName:"p"},"glasswall.classic.makefile"),"."),Object(a.b)("p",null,"The script simply invokes the following command, with ",Object(a.b)("inlineCode",{parentName:"p"},"Debug")," or ",Object(a.b)("inlineCode",{parentName:"p"},"Release")," as appropriate, and redirects to an aptly named log file:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"make -f glasswall.classic.makefile Debug -j `nproc` 2>&1 | tee $LOG_FNAME\nmake -f glasswall.classic.makefile Release -j `nproc` 2>&1 | tee $LOG_FNAME\n")),Object(a.b)("p",null,"The build produces ",Object(a.b)("inlineCode",{parentName:"p"},"libglasswall.classic.so")," in ",Object(a.b)("inlineCode",{parentName:"p"},"src/code/binaries/Debug/linux")," or ",Object(a.b)("inlineCode",{parentName:"p"},"src/code/binaries/Release/linux")," depending on whether the Debug or Release version was built."),Object(a.b)("p",null,"The file ",Object(a.b)("inlineCode",{parentName:"p"},"glasswallCLI")," is in directory ",Object(a.b)("inlineCode",{parentName:"p"},"src/code/binaries/tools/Linux"),"."),Object(a.b)("h2",{id:"3-debugging-rebuild"},"3. Debugging Rebuild"),Object(a.b)("p",null,"Debugging in the CentOS 7 VM is not practicable and is done using ",Object(a.b)("em",{parentName:"p"},"Visual Studio")," in Windows."),Object(a.b)("h2",{id:"4-running-rebuild"},"4. Running Rebuild"),Object(a.b)("p",null,"To run Rebuild in Linux, place ",Object(a.b)("inlineCode",{parentName:"p"}," run_rebuild.py")," in ",Object(a.b)("inlineCode",{parentName:"p"},"src/code/binaries/Debug/linux")," along with these files:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"glasswallCLI\nisonowdatetime.py\nlibglasswall.classic.so\n")),Object(a.b)("p",null,"To save having to specify a path for the profiles file and the test data files, you can also copy them in there, e.g., ",Object(a.b)("inlineCode",{parentName:"p"},"config.xml")," for the profiles, and ",Object(a.b)("inlineCode",{parentName:"p"},"Test_Set_01")," for the test files."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"run_rebuild.py")," creates a temporary config file, so there is no need to specify it. The usage of ",Object(a.b)("inlineCode",{parentName:"p"},"run_rebuild.py")," is:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"python run_rebuild.py input_loc output_loc file_type profiles mode\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"input_loc")," is the name of the directory containing the files to be processed."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"output_loc")," is the name of the directory prefix that will be used to place the substitute files. Do not use a path here, and do not use forward slashes. For example, An example directory that will be created if ",Object(a.b)("inlineCode",{parentName:"p"},"output_loc")," is ",Object(a.b)("inlineCode",{parentName:"p"},"Output")," is ",Object(a.b)("inlineCode",{parentName:"p"},"Output-20210219_102412-config.xml-MP"),". See below for details."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"file_type")," is one of the file types allowed for the ",Object(a.b)("inlineCode",{parentName:"p"},"fileType")," option in the config file; ",Object(a.b)("inlineCode",{parentName:"p"},"*")," is not allowed (the shell will expand it before it reaches the Python script - allowing it is earmarked as an enhancement)."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"profiles")," is the name of the profiles file to be used."),Object(a.b)("p",null,"Mode is one of "),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"MP\nAN\n")),Object(a.b)("p",null,"to denote Manage mode or Analysis mode."),Object(a.b)("p",null,"An example call would be:"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"python run_rebuild.py Test_Set_01 Output xls config.xml MP")),Object(a.b)("p",null,"This will create a directory of the form ",Object(a.b)("inlineCode",{parentName:"p"},"Output-20210219_102412-config.xml-MP"),", where the ",Object(a.b)("inlineCode",{parentName:"p"},"output_loc"),", ",Object(a.b)("inlineCode",{parentName:"p"},"profiles")," and ",Object(a.b)("inlineCode",{parentName:"p"},"mode")," data have been used in the filename, along with a date-time stamp in ISO 8601 format."),Object(a.b)("p",null,"Although it may seem that it's almost as simple to run ",Object(a.b)("inlineCode",{parentName:"p"},"glasswallCLI")," natively from the command line, passing in the config and profiles file names, rather than running ",Object(a.b)("inlineCode",{parentName:"p"},"run_rebuild.py"),", running ",Object(a.b)("inlineCode",{parentName:"p"},"run_rebuild.py")," means you can perform multiple runs without over-writing previous ones, by simply recalling the command in the Bash shell."),Object(a.b)("h1",{id:"quick-view"},"Quick View"),Object(a.b)("h2",{id:"5-build"},"5. Build"),Object(a.b)("p",null,"5.1. Run ",Object(a.b)("inlineCode",{parentName:"p"},"build-linux-debug.sh")," in ",Object(a.b)("inlineCode",{parentName:"p"},"src/code"),"."),Object(a.b)("h2",{id:"6-run-glasswallcli"},"6. Run glasswallCLI"),Object(a.b)("p",null,"6.1. Place these files (and one directory) in ",Object(a.b)("inlineCode",{parentName:"p"},"src/code/binaries/Debug/linux"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"glasswallCLI\nisonowdatetime.py\nlibglasswall.classic.so\nprofiles.xml\nrun_rebuild.py\nTest_Set_01/\n")),Object(a.b)("p",null,"then run ",Object(a.b)("inlineCode",{parentName:"p"},"run_rebuild.py"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"python run_rebuild.py Test_Set_01 Output xls config.xml MP\n")),Object(a.b)("p",null,"This will create an output directory of form:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"Output-20210219_102412-config.xml-MP\n")),Object(a.b)("p",null,"Run as many times as you like, no directory will be over-written (as long as each run happens outside of a one second gap)."),Object(a.b)("p",null,"--- End of file rebuild-linux.md ---"))}c.isMDXComponent=!0}}]);