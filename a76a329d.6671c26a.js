(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{205:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return u}));var a=t(2),i=t(6),r=(t(0),t(289)),o={title:"3.10 Learn YAML in Y Minutes",sidebar_label:"3.10 Learn YAML in Y Minutes"},s={unversionedId:"3-guides/3_10-learn_yaml_in_y-minutes",id:"3-guides/3_10-learn_yaml_in_y-minutes",isDocsHomePage:!1,title:"3.10 Learn YAML in Y Minutes",description:"This is taken from learnxinyminutes.com",source:"@site/docs/3-guides/3_10-learn_yaml_in_y-minutes.md",slug:"/3-guides/3_10-learn_yaml_in_y-minutes",permalink:"/glasswall-sdk-site/docs/3-guides/3_10-learn_yaml_in_y-minutes",version:"current",sidebar_label:"3.10 Learn YAML in Y Minutes",sidebar:"someSidebar",previous:{title:"3.9 Using Qt in Glasswall",permalink:"/glasswall-sdk-site/docs/3-guides/3_9-using_qt_in_glasswall"},next:{title:"4.1 Core Test Strategy",permalink:"/glasswall-sdk-site/docs/4-testing/4_1-core_test_strategy"}},l=[],c={rightToc:l};function u(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This is taken from learnxinyminutes.com"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"# Comments in YAML look like this.\n\n################\n# SCALAR TYPES #\n################\n\n# Our root object (which continues for the entire document) will be a map,\n# which is equivalent to a dictionary, hash or object in other languages.\nkey: value\nanother_key: Another value goes here.\na_number_value: 100\nscientific_notation: 1e+12\n\n# The number 1 will be interpreted as a number, not a boolean. if you want\n# it to be intepreted as a boolean, use true\nboolean: true\nnull_value: null\nkey with spaces: value\n\n# Notice that strings don't need to be quoted. However, they can be.\nhowever: \"A string, enclosed in quotes.\"\n\"Keys can be quoted too.\": \"Useful if you want to put a ':' in your key.\"\n\n# Multiple-line strings can be written either as a 'literal block' (using |),\n# or a 'folded block' (using '>').\nliteral_block: |\n    This entire block of text will be the value of the 'literal_block' key,\n    with line breaks being preserved.\n\n    The literal continues until de-dented, and the leading indentation is\n    stripped.\n\n        Any lines that are 'more-indented' keep the rest of their indentation -\n        these lines will be indented by 4 spaces.\nfolded_style: >\n    This entire block of text will be the value of 'folded_style', but this\n    time, all newlines will be replaced with a single space.\n\n    Blank lines, like above, are converted to a newline character.\n\n        'More-indented' lines keep their newlines, too -\n        this text will appear over two lines.\n\n####################\n# COLLECTION TYPES #\n####################\n\n# Nesting is achieved by indentation.\na_nested_map:\n    key: value\n    another_key: Another Value\n    another_nested_map:\n        hello: hello\n\n# Maps don't have to have string keys.\n0.25: a float key\n\n# Keys can also be complex, like multi-line objects\n# We use ? followed by a space to indicate the start of a complex key.\n? |\n    This is a key\n    that has multiple lines\n: and this is its value\n\n# YAML also allows mapping between sequences with the complex key syntax\n# Some language parsers might complain\n# An example\n? - Manchester United\n  - Real Madrid\n: [ 2001-01-01, 2002-02-02 ]\n\n# Sequences (equivalent to lists or arrays) look like this:\na_sequence:\n    - Item 1\n    - Item 2\n    - 0.5 # sequences can contain disparate types.\n    - Item 4\n    - key: value\n      another_key: another_value\n    -\n        - This is a sequence\n        - inside another sequence\n\n# Since YAML is a superset of JSON, you can also write JSON-style maps and\n# sequences:\njson_map: {\"key\": \"value\"}\njson_seq: [3, 2, 1, \"takeoff\"]\n\n#######################\n# EXTRA YAML FEATURES #\n#######################\n\n# YAML also has a handy feature called 'anchors', which let you easily duplicate\n# content across your document. Both of these keys will have the same value:\nanchored_content: &anchor_name This string will appear as the value of two keys.\nother_anchor: *anchor_name\n\n# Anchors can be used to duplicate/inherit properties\nbase: &base\n    name: Everyone has same name\n\nfoo: &foo\n    <<: *base\n    age: 10\n\nbar: &bar\n    <<: *base\n    age: 20\n\n# foo and bar would also have name: Everyone has same name\n\n# YAML also has tags, which you can use to explicitly declare types.\nexplicit_string: !!str 0.5\n# Some parsers implement language specific tags, like this one for Python's\n# complex number type.\npython_complex_number: !!python/complex 1+2j\n\n# We can also use yaml complex keys with language specific tags\n? !!python/tuple [5, 7]\n: Fifty Seven\n# Would be {(5, 7): 'Fifty Seven'} in python\n\n####################\n# EXTRA YAML TYPES #\n####################\n\n# Strings and numbers aren't the only scalars that YAML can understand.\n# ISO-formatted date and datetime literals are also parsed.\ndatetime: 2001-12-15T02:59:43.1Z\ndatetime_with_spaces: 2001-12-14 21:59:43.10 -5\ndate: 2002-12-14\n\n# The !!binary tag indicates that a string is actually a base64-encoded\n# representation of a binary blob.\ngif_file: !!binary |\n    R0lGODlhDAAMAIQAAP//9/X17unp5WZmZgAAAOfn515eXvPz7Y6OjuDg4J+fn5\n    OTk6enp56enmlpaWNjY6Ojo4SEhP/++f/++f/++f/++f/++f/++f/++f/++f/+\n    +f/++f/++f/++f/++f/++SH+Dk1hZGUgd2l0aCBHSU1QACwAAAAADAAMAAAFLC\n    AgjoEwnuNAFOhpEMTRiggcz4BNJHrv/zCFcLiwMWYNG84BwwEeECcgggoBADs=\n\n# YAML also has a set type, which looks like this:\nset:\n    ? item1\n    ? item2\n    ? item3\n\n# Like Python, sets are just maps with null values; the above is equivalent to:\nset2:\n    item1: null\n    item2: null\n    item3: null\n")))}u.isMDXComponent=!0},289:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),u=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},h=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),h=a,m=p["".concat(o,".").concat(h)]||p[h]||d[h]||r;return t?i.a.createElement(m,s(s({ref:n},c),{},{components:t})):i.a.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);