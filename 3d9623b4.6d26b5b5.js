(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{119:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return a})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var s=n(2),i=n(6),r=(n(0),n(284)),o={title:"2.2.6.1.1  Editor API Specification",sidebar_label:"2.2.6.1.1 Editor API Specification"},a={unversionedId:"2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_1-editorAPIspecification",id:"2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_1-editorAPIspecification",isDocsHomePage:!1,title:"2.2.6.1.1  Editor API Specification",description:"1 GLOSSARY",source:"@site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_1-editorAPIspecification.md",slug:"/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_1-editorAPIspecification",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_1-editorAPIspecification",version:"current",sidebar_label:"2.2.6.1.1 Editor API Specification",sidebar:"someSidebar",previous:{title:"2.2.5.2 Versioning",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_5-build/2_2_5_2-versioning"},next:{title:"2.2.6.1.2 API Functions",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_1-api/2_2_6_1_2-apifunctions"}},l=[{value:"<strong>1 GLOSSARY</strong>",id:"1-glossary",children:[]},{value:"<strong>2 INTRODUCTION</strong>",id:"2-introduction",children:[{value:"2.1 Objective",id:"21-objective",children:[]},{value:"2.2 Nomenclature",id:"22-nomenclature",children:[]},{value:"2.3 Glasswall Technology",id:"23-glasswall-technology",children:[]},{value:"2.4 Types",id:"24-types",children:[]},{value:"2.5 Return Types",id:"25-return-types",children:[]}]},{value:"<strong>3. THE A.P.I.</strong>",id:"3-the-api",children:[{value:"3.1 A.P.I. Overview",id:"31-api-overview",children:[]},{value:"3.2 A.P.I. Functions",id:"32-api-functions",children:[]}]},{value:"<strong>4 Editor A.P.I. Function Call Summary</strong>",id:"4-editor-api-function-call-summary",children:[]},{value:"5 Summary of A.P.I. Functions",id:"5-summary-of-api-functions",children:[]}],c={rightToc:l};function p(e){var t=e.components,o=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(s.a)({},c,o,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"1-glossary"},Object(r.b)("strong",{parentName:"h2"},"1 GLOSSARY")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(s.a)({parentName:"tr"},{align:null}),"Term"),Object(r.b)("th",Object(s.a)({parentName:"tr"},{align:null}),"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"Session"),Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"A session encapsulates the processing of a single file, specified either as a file path or a pointer to a memory image of the file. The session is given information regarding the required output of the session, the policies to be applied, and any other actions required.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),Object(r.b)("a",{name:"base_name"})," Base name"),Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"The base name is the component left after all leading directory components have been removed from a file path. The base name can refer to a directory or file.")))),Object(r.b)("h2",{id:"2-introduction"},Object(r.b)("strong",{parentName:"h2"},"2 INTRODUCTION")),Object(r.b)("h3",{id:"21-objective"},"2.1 Objective"),Object(r.b)("p",null,"The objective of this document is to document the Application\nProgramming Interface (API) for the Glasswall Editor Dynamic Link\nLibrary and Linux Shared Object."),Object(r.b)("h3",{id:"22-nomenclature"},"2.2 Nomenclature"),Object(r.b)("p",null,'A monospaced font is used for any source code related information. This is\nto distinguish it from normal text, and to obviate problems in other\nfonts for reading names such as "lInfoFlag1" which is actually'),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),"lInfoFlag1\n")),Object(r.b)("p",null,"(lowercase L and uppercase i look the same in quite a few fonts)."),Object(r.b)("p",null,"Code examples are shown in a shaded box. For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),"#include \u201cglasswall.core2.api.h\u201d\nSession session = GW2OpenSession();\nif (!session)\n/* deal with error */\nelse\n/* use session to refer to the session in other API function calls */\n/* later */\nif (GW2CloseSession(session))\n/* error closing session */\n")),Object(r.b)("p",null,"Depending on context, the word ",Object(r.b)("em",{parentName:"p"},"bracket")," is used to indicate any of the\npaired delimiters ",Object(r.b)("inlineCode",{parentName:"p"},"()"),", ",Object(r.b)("inlineCode",{parentName:"p"},"{}"),", ",Object(r.b)("inlineCode",{parentName:"p"},"[]"),", although ",Object(r.b)("inlineCode",{parentName:"p"},"()"),"  are sometimes referred to as parentheses, and ",Object(r.b)("inlineCode",{parentName:"p"},"{}")," are sometimes referred to as braces."),Object(r.b)("p",null,"Code examples are shown using a monospaced font. Sometimes short examples are included in the text\nin a monospaced font."),Object(r.b)("h3",{id:"23-glasswall-technology"},"2.3 Glasswall Technology"),Object(r.b)("p",null,"Glasswall provides deep-file inspection, remediation, sanitisation and\nreporting. The Glasswall API functions give third-party users the\nability to fine-tune an interface to the Glasswall functionality."),Object(r.b)("h3",{id:"24-types"},"2.4 Types"),Object(r.b)("p",null,'The API makes available two enumerations for use by clients as argument\ntypes to certain API functions. Include the header file\n"',Object(r.b)("inlineCode",{parentName:"p"},"glasswall.core2.api.h"),'" in your source file and use the enumerators when\ncalling the API functions.'),Object(r.b)("h4",{id:"241-policy_format"},"2.4.1 Policy_format"),Object(r.b)("p",null,"The enumeration ",Object(r.b)("inlineCode",{parentName:"p"},"Policy_format")," is used to specify the format of the\npolicies file. The following enumerator is available:"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),"PF_XML\n")),Object(r.b)("h4",{id:"242-analysis_format"},"2.4.2 Analysis_format"),Object(r.b)("p",null,"The enumeration ",Object(r.b)("inlineCode",{parentName:"p"},"Analysis_format")," is used to specify the format of the\nanalysis file. The following enumerator is available:"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),"AF_XML\n")),Object(r.b)("h4",{id:"243-ft_t"},"2.4.3 ft_t"),Object(r.b)("p",null,"The enumeration ",Object(r.b)("inlineCode",{parentName:"p"},"ft_t"),' is used to indicate the file type (file format) of\na file. Include header file "',Object(r.b)("inlineCode",{parentName:"p"},"filetype.h"),'" in your source code files to\nuse them.'),Object(r.b)("div",{style:{color:"red"}},'This is marked for change to "Ft_t" to conform to the coding guidelines.'),Object(r.b)("h4",{id:"244-session"},"2.4.4 Session"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Session")," is a type that represents a file and the mechanisms used to\nprocess that file. It is used by all Glasswall file processing API\nfunctions."),Object(r.b)("div",{style:{color:"red"}},'This is marked for change to "SessionHandle".'),Object(r.b)("h3",{id:"25-return-types"},"2.5 Return Types"),Object(r.b)("p",null,"Most of the functions in the Glasswall API return a value that indicates success or failure. The values and their meaning are listed below."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(s.a)({parentName:"tr"},{align:null}),"Value"),Object(r.b)("th",Object(s.a)({parentName:"tr"},{align:null}),"Meaning"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"-2"),Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"End of file was detected unexpectedly.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"-1"),Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"General failure; Glasswall failed to process the file")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"0"),Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"General success; the file was processed successfully.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"1"),Object(r.b)("td",Object(s.a)({parentName:"tr"},{align:null}),"The file was processed successfully and cleaning was performed.")))),Object(r.b)("p",null,"Each of the functions described in \xa73 assumes that one of these values is returned unless stated otherwise in the detailed description."),Object(r.b)("h2",{id:"3-the-api"},Object(r.b)("strong",{parentName:"h2"},"3. THE A.P.I.")),Object(r.b)("h3",{id:"31-api-overview"},"3.1 A.P.I. Overview"),Object(r.b)("p",null,"The API is session based. ",Object(r.b)("strong",{parentName:"p"},"Session")," is a type that represents a file\nand the mechanisms used to process that file. You create a ",Object(r.b)("strong",{parentName:"p"},"Session"),"\nobject by calling ",Object(r.b)("strong",{parentName:"p"},"GW2OpenSession")," which returns a session handle. You\npass the session handle to other API functions to register the inputs\nand outputs, the forms of the inputs and outputs (memory or a file) and\nwhich processing mode is required (Analysis, Manage & Protect, Import,\nExport). You then process the file by calling function ",Object(r.b)("strong",{parentName:"p"},"GW2RunSession"),"\nand close the session calling ",Object(r.b)("strong",{parentName:"p"},"GW2CloseSession"),", after processing any\nnon-persistent storage, or saving non-persistent storage."),Object(r.b)("p",null,"The encapsulation of the processing of each file in a ",Object(r.b)("strong",{parentName:"p"},"Session")," object\nallows multi-thread processing."),Object(r.b)("p",null,"The ",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"#32-api-functions"}),"API Functions")," section provides details of each function, and\nexamples for their use."),Object(r.b)("p",null,"The examples provided conform to the C programming language, as defined by ISO 9899:1990."),Object(r.b)("h3",{id:"32-api-functions"},"3.2 A.P.I. Functions"),Object(r.b)("h4",{id:"321-the-gw2closesession-function"},"3.2.1 The GW2CloseSession Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2CloseSession(Session session);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2CloseSession")," function closes the session designated by\n",Object(r.b)("strong",{parentName:"p"},"session"),". All resources allocated by the session will be destroyed.\nOnly data stored to persistent storage can be processed by the client\nafter a successful call to ",Object(r.b)("strong",{parentName:"p"},"GW2CloseSession"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns")),Object(r.b)("p",null,"If successful, the ",Object(r.b)("strong",{parentName:"p"},"GW2CloseSession")," function returns zero; otherwise,\nit returns non-zero."),Object(r.b)("h4",{id:"322-the-gw2determinefiletypefromfile-function"},"3.2.2 The ",Object(r.b)("strong",{parentName:"h4"},"GW2DetermineFileTypeFromFile")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nFt_t GW2DetermineFileTypeFromFile(const char *path);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2DetermineFileTypeFromFile")," function determines the file type\nfor the file whose name is the string pointed to by ",Object(r.b)("strong",{parentName:"p"},"path"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns")),Object(r.b)("p",null,"If ",Object(r.b)("strong",{parentName:"p"},"GW2DetermineFileTypeFromFile")," cannot discern the file type, it\nreturns the value of the enumeration constant ",Object(r.b)("strong",{parentName:"p"},"ft_unknown")," from the\nenumerated type ",Object(r.b)("strong",{parentName:"p"},"ft_t"),"; otherwise, it returns a value from the\nenumerated type ",Object(r.b)("strong",{parentName:"p"},"ft_t")," indicating the file type. A list of the\nenumeration constants is in the C source header file ",Object(r.b)("strong",{parentName:"p"},"filetypes.h"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\n#include "filetypes.h"\n\nft_t file_type =\nGW2DetermineFileTypeFromFile("c:\\dir1\\dir2\\filename");\nchar *type = NULL;\nswitch (file_type) /* categorise them */\n{\n    case ft_doc:\n    case ft_docx:\n    case ft_ppt:\n    case ft_pptx:\n    case ft_xls:\n    case ft_xlsx:\n        type = "Microsoft Office";\n        break;\n\n    case ft_png:\n    case ft_jpg:\n    case ft_gif:\n    case ft_tiff:\n        type = "Image file";\n        break;\n\n    case ft_pdf:\n        type = "PDF";\n        break;\n\n    default:\n        type = "Unrecognised file type";\n        break;\n}\nprintf("File type is: %s\\n", type);\n')),Object(r.b)("h4",{id:"323-the-gw2determinefiletypefrommemory-function"},"3.2.3 The ",Object(r.b)("strong",{parentName:"h4"},"GW2DetermineFileTypeFromMemory")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nFt_t GW2DetermineFileTypeFromFile(const char *inputFileBuffer, size_t inputLength);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2DetermineFileTypeFromMemory")," function determines the file type\nof the file whose content is in the buffer pointed to by\n",Object(r.b)("strong",{parentName:"p"},"inputFileBuffer"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns")),Object(r.b)("p",null,"If ",Object(r.b)("strong",{parentName:"p"},"GW2DetermineFileTypeFromMemory")," cannot discern the file type, it\nreturns the value of the enumeration constant ",Object(r.b)("strong",{parentName:"p"},"ft_unknown")," from the\nenumerated type ",Object(r.b)("strong",{parentName:"p"},"ft_t"),"; otherwise, it returns a value from the\nenumerated type ",Object(r.b)("strong",{parentName:"p"},"ft_t")," indicating the file type. A list of the\nenumeration constants is in the C source header file ",Object(r.b)("strong",{parentName:"p"},"filetypes.h"),"."),Object(r.b)("h4",{id:"324-the-gw2fileerrormsg-function"},"3.2.4 The ",Object(r.b)("strong",{parentName:"h4"},"GW2FileErrorMsg")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2FileErrorMsg(Session session, char **errorMsgBuffer, size_t *errorMsgBufferLength);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2FileErrorMsg")," function retrieves the error message reported by\nGlasswall. A pointer to the error message is placed in the object\npointed to by ",Object(r.b)("strong",{parentName:"p"},"errorMsgBuffer")," and the size, in bytes, of the error\nmessage is placed in the ",Object(r.b)("strong",{parentName:"p"},"size_t")," object pointed to by\n",Object(r.b)("strong",{parentName:"p"},"errorMsgBufferLength.")),Object(r.b)("p",null,"If there was more than one reason for the error, only one will be\nreported by this function call. If details are required for the failure,\nthey will be present in the analysis report produced if either of the\nfunctions ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterAnalysisFile")," or ",Object(r.b)("strong",{parentName:"p"},"GW2AnalysisRegisterMemory"),"\nwere called on the session. If not, the document can be processed by\nGlasswall using either of those functions in another session to produce\na detailed analysis report."),Object(r.b)("h4",{id:"325-the-gw2filesessionstatus-function"},"3.2.5 The ",Object(r.b)("strong",{parentName:"h4"},"GW2FileSessionStatus")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2FileSessionStatus(Session\xa0session,\n    int\xa0*glasswallSessionStatus,\n    char **statusMsgBuffer, size_t *statusBufferLength);\n')),Object(r.b)("p",null,"For session ",Object(r.b)("strong",{parentName:"p"},"session")," the ",Object(r.b)("strong",{parentName:"p"},"GW2FileSessionStatus")," function places in\nthe object pointed to by ",Object(r.b)("strong",{parentName:"p"},"glasswallSessionStatus")," a pointer to a\nstring that describes, at a high level, the processing carried out on\nthe last document processed by Glasswall."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns")),Object(r.b)("p",null,"If ",Object(r.b)("strong",{parentName:"p"},"session")," is invalid (0), or a value that has not been returned by\n",Object(r.b)("strong",{parentName:"p"},"GW2OpenSession"),", it will return -1 and ",Object(r.b)("strong",{parentName:"p"},"glasswallSessionStatus"),",\n",Object(r.b)("strong",{parentName:"p"},"statusMsgBuffer")," and ",Object(r.b)("strong",{parentName:"p"},"statusBufferLength")," will be undefined. If\n",Object(r.b)("strong",{parentName:"p"},"session")," is valid, the function returns 0 and\n",Object(r.b)("strong",{parentName:"p"},"glasswallSessionStatus, statusMsgBuffer")," and ",Object(r.b)("strong",{parentName:"p"},"statusBufferLength"),"\nwill be populated."),Object(r.b)("h4",{id:"326-the-gw2getallidinfo-function"},"3.2.6 The ",Object(r.b)("strong",{parentName:"h4"},"GW2GetAllIdInfo")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include\xa0"glasswall.core2.api.h"\nint\xa0GW2GetAllIdInfo(Session session, size_t\xa0*bufferLength, char\xa0**outputBuffer);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"For session ",Object(r.b)("strong",{parentName:"p"},"session")," the ",Object(r.b)("strong",{parentName:"p"},"GW2GetAllIdInfo")," function places in the\nobject pointed to by ",Object(r.b)("strong",{parentName:"p"},"outputBuffer")," a pointer to XML data populated\nwith Glasswall Issue ID descriptions and value ranges. The length, in\nbytes, of the populated output buffer is placed in the ",Object(r.b)("strong",{parentName:"p"},"size_t")," object\npointed to by ",Object(r.b)("strong",{parentName:"p"},"bufferLength"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\n\nchar *outbuf = NULL;\nsize_t buflen = 0;\nif (GW2OpenSession())\n    /* error opening session */\nelse\n{\n    int status = GW2GetAllIdInfo(session, &buflen, &outbuf);\n    /* if status is not 0, outbuf points to a buffer containing the XML file.\n    * Either process the data pointed to, or copy the data and process it\n    * after the session is closed\n    */\n    if (GW2CloseSession())\n        /* error closing session */\n}\n')),Object(r.b)("h4",{id:"327-the-gw2getidinfo-function"},"3.2.7 The ",Object(r.b)("strong",{parentName:"h4"},"GW2GetIdInfo")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2GetIdInfo(Session session, size_t issueId, size_t *bufferLength, char **outputBuffer);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"For session ",Object(r.b)("strong",{parentName:"p"},"session"),", ",Object(r.b)("strong",{parentName:"p"},"GW2GetIdInfo")," places in the object pointed\nto by ",Object(r.b)("strong",{parentName:"p"},"outputBuffer"),", a pointer to a description of Glasswall Issue ID\n",Object(r.b)("strong",{parentName:"p"},"issueId"),". The length of the description, in bytes, is placed in the\n",Object(r.b)("strong",{parentName:"p"},"size_t")," object pointed to by ",Object(r.b)("strong",{parentName:"p"},"bufferLength"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\n\nchar *outbuf = NULL;\nsize_t buflen = 0;\nif (GW2OpenSession())\n    /* error opening session */\nelse\n{\n    int status = GW2GetIdInfo(session, issueId, &buflen, &outbuf);\n    /* if status is not 0, outbuf points to a buffer containing the XML file.\n    * Either process the data pointed to, or copy the data and process it\n    * after GW2CloseSession is called\n    */\n    if (GW2CloseSession())\n        /* error closing session */\n}\n')),Object(r.b)("h4",{id:"328-the-gw2getpolicysettings-function"},"3.2.8 The ",Object(r.b)("strong",{parentName:"h4"},"GW2GetPolicySettings")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2GetPolicySettings(Session session,\n                         char **policiesBuffer,\n                         size_t *policiesLength,\n                         Policy_format format\n                        );\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2GetPolicySettings")," function returns the policy settings used\nfor session ",Object(r.b)("strong",{parentName:"p"},"session"),". A pointer to the information is placed in the\nobject pointed to by ",Object(r.b)("strong",{parentName:"p"},"policiesBuffer")," and the size, in bytes, of the\ndata pointed to is placed in the ",Object(r.b)("strong",{parentName:"p"},"size_t")," object pointed to by\n",Object(r.b)("strong",{parentName:"p"},"policiesLength"),". The format of the data will be in the format\nspecified by ",Object(r.b)("strong",{parentName:"p"},"format"),"."),Object(r.b)("h4",{id:"329-the-gw2libversion-function"},"3.2.9 The ",Object(r.b)("strong",{parentName:"h4"},"GW2LibVersion")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nconst char *GW2LibVersion(void);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2LibVersion")," function returns a pointer to a constant string\ndescribing the current version of the Glasswall Core 2 library."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include <stdio.h>\n#include "glasswall.core2.api.h"\n\nputs(GW2LibVersion());\n')),Object(r.b)("h4",{id:"3210-the-gw2opensession-function"},"3.2.10 The ",Object(r.b)("strong",{parentName:"h4"},"GW2OpenSession")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nSession GW2OpenSession(void);\n')),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2OpenSession")," function creates a new session."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns")),Object(r.b)("p",null,"If successful, the ",Object(r.b)("strong",{parentName:"p"},"GW2OpenSession")," function returns a handle, a small\npositive integer that designates the session. The handle is used as an\nargument to other API functions to identify the session. If the call\nfails, the handle will be zero."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\n\nSession session = GW2OpenSession();\nif (!session)\n    /* deal with error */\nelse\n    /* use session to refer to the session in other API function calls */\n\n/* later */\nif (GW2CloseSession(session))\n    /* error closing session */\n')),Object(r.b)("h4",{id:"3211-the-gw2registeranalysisfile-function"},"3.2.11 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterAnalysisFile")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterAnalysisFile(Session session,\n                            const char *analysisFilePath,\n                            Analysis_format format\n                           );\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterAnalysisFile")," function stores in the file whose name\nis pointed to by string ",Object(r.b)("strong",{parentName:"p"},"analysisFilePath")," the analysis report\nproduced by a successful run of API function ",Object(r.b)("strong",{parentName:"p"},"runSession")," that used\nsession ",Object(r.b)("strong",{parentName:"p"},"session"),". Using this function activates the Analysis Process\nMode for the session."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\n\nSession session = GW2OpenSession();\nif (!session)\n    /* deal with error */\nelse\n    if (GW2RegisterAnalysisFile(session,\n                                "c:\\\\analysis_files\\\\analysis_file_023.xml",\n                                AF_XML)\n                               )\n        /* deal with error */\n    else\n        /* analysis file registered */\n\n/* later */\nif (GW2CloseSession(session))\n    /* error closing session */\n')),Object(r.b)("h4",{id:"3212-the-gw2registeranalysismemory-function"},"3.2.12 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterAnalysisMemory")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterAnalysisMemory(Session session,\n                              char **analysisFileBuffer,\n                              size_t analysisLength,\n                              Analysis_format format\n                             );\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterAnalysisMemory")," function stores in the object pointed\nto by ",Object(r.b)("strong",{parentName:"p"},"analysisFileBuffer")," a pointer to the analysis report produced\nby a successful run of API function ",Object(r.b)("strong",{parentName:"p"},"runSession")," that used session\n",Object(r.b)("strong",{parentName:"p"},"session"),". The size of the analysis report, in bytes, is placed in the\nobject pointed to by ",Object(r.b)("strong",{parentName:"p"},"analysisLength"),". The format of the analysis\nreport will be in the format requested by ",Object(r.b)("strong",{parentName:"p"},"format"),". Using this\nfunction activates the Analysis Process Mode for the session."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\n\nHANDLE session;\nchar *analysisReport = NULL;\nsession = GW2OpenSession();\nif (!session)\n    /* deal with error */\nelse\n    if (GW2RegisterAnalysisMemory(session, &analysisReport, PF_XML))\n    /* deal with error */\n    else\n    /* analysisReport points to the analysis report data */\n\n/* later */\nif (GW2CloseSession(session))\n    /* error closing session */\n')),Object(r.b)("h4",{id:"3213-the-gw2registerexportfile-function"},"3.2.13 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterExportFile")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterExportFile(Session session, const char *exportFilePath);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterExportFile")," function registers the file whose name is\nthe string pointed to by ",Object(r.b)("strong",{parentName:"p"},"exportFilePath")," with the session denoted by\n",Object(r.b)("strong",{parentName:"p"},"session.")," The exported data will be placed in that file. Using this\nfunction activates the Export Process Mode for the session."),Object(r.b)("h4",{id:"3214-the-gw2registerexportmemory-function"},"3.2.14 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterExportMemory")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterExportMemory(Session session,\n                            char **exportFileBuffer,\n                            size_t *exportFileBufferLength\n                           );\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"For session ",Object(r.b)("strong",{parentName:"p"},"session"),", the ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterExportMemory")," function\nregisters where the exported content is to be placed, and where to place\nthe size in bytes of the exported content. A pointer to the exported\ncontent will be placed in the object pointed to by ",Object(r.b)("strong",{parentName:"p"},"exportFileBuffer"),"\nand the size in bytes of the exported data will be placed in the\n",Object(r.b)("strong",{parentName:"p"},"size_t")," object pointed to by ",Object(r.b)("strong",{parentName:"p"},"exportFileBufferLength"),". The exported\ncontent will be deleted when the session is closed using\n",Object(r.b)("strong",{parentName:"p"},"GW2CloseSession"),". Using this function activates the Export Process\nMode for the session."),Object(r.b)("h4",{id:"3215-the-gw2registerimportfile-function"},"3.2.15 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterImportFile")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterImportFile(Session session, const char *importFilePath);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterImportFile")," function registers the file whose name is\npointed to by ",Object(r.b)("strong",{parentName:"p"},"importFilePath")," as the file it should import. The file\nmust conform to the interchange file format. Using this function\nactivates the Import Process Mode for the session."),Object(r.b)("h4",{id:"3216-the-gw2registerimportmemory-function"},"3.2.16 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterImportMemory")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterImportMemory(Session session, char *importFileBuffer, size_t *importLength);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterImportMemory")," function registers with the session\ndenoted by ",Object(r.b)("strong",{parentName:"p"},"session")," the file which is stored in the buffer pointed to\nby ",Object(r.b)("strong",{parentName:"p"},"importFilePath")," of size ",Object(r.b)("strong",{parentName:"p"},"inputLength")," bytes as the file it\nshould import. The file must conform to the interchange file format.\nUsing this function activates the Import Process Mode for the session."),Object(r.b)("h4",{id:"3217-the-gw2registerinputfile-function"},"3.2.17 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterInputFile")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterInputFile(Session session, const char *inputFilePath);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterInputFile")," function registers the file to be processed\nin session ",Object(r.b)("strong",{parentName:"p"},"session"),". The file name is the string pointed to by\n",Object(r.b)("strong",{parentName:"p"},"inputFilePath"),"."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\n\nHANDLE session = GW2OpenSession();\nif (!session)\n    /* deal with error */\nelse\n{\n    if (GW2RegisterInputFile(session, "filename.doc"))\n        /* deal with error */\n    else\n        /* continue processing */\n        ...\n}\n\n/* later */\nif (GW2CloseSession(session))\n    /* error closing session */\n')),Object(r.b)("h4",{id:"3218-the-gw2registerinputmemory-function"},"3.2.18 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterInputMemory")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterInputMemory(Session session, const char *inputFileBuffer, size_t inputLength);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterInputMemory")," function registers the file which is\nstored in the buffer pointed to by ",Object(r.b)("strong",{parentName:"p"},"inputFileBuffer")," of size\n",Object(r.b)("strong",{parentName:"p"},"inputLength")," bytes, with the session denoted by ",Object(r.b)("strong",{parentName:"p"},"session.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),"#include \"glasswall.core2.api.h\"\n. . .\nHANDLE session = GW2OpenSession();\nif (!session)\n    /* deal with error */\nelse\n{\n    /* ... load file contents into buffer 'buf' and log the file size in 'size' ... */\n    if (GW2RegisterInputMemory(session, buf, size))\n        /* deal with error */\n    else\n        /* continue processing */\n        ...\n}\n\n/* later */\nif (GW2CloseSession(session))\n    /* error closing session */\n")),Object(r.b)("h4",{id:"3219-the-gw2registeroutputfile-function"},"3.2.19 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterOutputFile")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterOutFile(Session session, const char *outputFilePath);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"For session ",Object(r.b)("strong",{parentName:"p"},"session")," the ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterOutFile")," function registers\nthe file whose name is the string pointed to by ",Object(r.b)("strong",{parentName:"p"},"outputFileBuffer")," as\nthe destination file for the managed file produced by Glasswall. The\n",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"#1-glossary"}),Object(r.b)("strong",{parentName:"a"},"base name"))," of the path must be different to the base name registered\nusing the ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterInputFile")," function. Using this function\nactivates the Manage & Protect Process Mode for the session."),Object(r.b)("div",{style:{color:"red"}},'NOTE: This should be called "GW2RegisterOutputFile" for symmetry with "GW2RegisterInputFile".'),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\n\nHANDLE session = GW2OpenSession();\nif (!session)\n    /* deal with error */\nelse\n{\n    if (GW2RegisterOutFile(session, "managed_file.docx"))\n        /* deal with error */\n    else\n        /* continue processing */\n        ...\n}\n\n/* later */\nif (GW2CloseSession(session))\n/* error closing session */\n')),Object(r.b)("h4",{id:"3220-the-gw2registeroutputmemory-function"},"3.2.20 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterOutputMemory")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterOutputMemory(Session session, char **outputBuffer, size_t *outputLength);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"For session ",Object(r.b)("strong",{parentName:"p"},"session"),", the ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterOutputMemory")," function\nregisters where the managed content is to be placed, and where to place\nthe size in bytes of the managed content. A pointer to the managed file\ncontent will be placed in the object pointed to by ",Object(r.b)("strong",{parentName:"p"},"outputBuffer")," and\nthe size in bytes of the managed data will be placed in the ",Object(r.b)("strong",{parentName:"p"},"size_t"),"\nobject pointed to by ",Object(r.b)("strong",{parentName:"p"},"outputLength"),". The managed file content will be\ndeleted when the session is closed using ",Object(r.b)("strong",{parentName:"p"},"GW2CloseSession"),". Using this\nfunction activates the Manage & Protect Process Mode for the session."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\n\nHANDLE session = GW2OpenSession();\nchar *managed_content = NULL;\nsize_t size = 0;\nif (!session)\n    /* deal with error */\nelse\n{\n    if (GW2RegisterOutputMemory(session, &managed_content, &size))\n        /* deal with error */\n    else\n        /* continue processing */\n        ...\n}\n/* later */\nif (GW2CloseSession(session))\n    /* error closing session */\nelse\n    /* managed file content has been deleted */\n')),Object(r.b)("h4",{id:"3221-the-gw2registerpoliciesfile-function"},"3.2.21 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterPoliciesFile")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterPoliciesFile(Session session, const char *filename, Policy_format format);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterPoliciesFile")," function requests that session\n",Object(r.b)("strong",{parentName:"p"},"session")," uses the policies specified in the file whose name is the\nstring pointed to by ",Object(r.b)("strong",{parentName:"p"},"filename.")," The format of the policies is in the\nformat specified by ",Object(r.b)("strong",{parentName:"p"},"format"),". The policies will be applied to all\nprocessing performed by Glasswall for that session."),Object(r.b)("p",null,"If neither ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterPoliciesFile")," or ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterPoliciesMemory"),"\nis registered with a session, the default policies will be applied to\nthat session."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\n\nHANDLE session = GW2OpenSession();\nif (!session)\n    /* deal with error */\nelse\n    if (GW2RegisterPoliciesFile(session, "Office_Binary_Policies.xml",  PF_XML))\n        /* deal with error */\n    else\n        /* the file has been successfully registered */\n\n. . .\n\n/* later */\nif (GW2CloseSession(session))\n    /* error closing session */\n')),Object(r.b)("h4",{id:"3222-the-gw2registerpoliciesmemory-function"},"3.2.22 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterPoliciesMemory")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterPoliciesMemory(Session session,\n                              const char *policies,\n                              size_t policiesLength,\n                              Policy_format format\n                             );\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"For session ",Object(r.b)("strong",{parentName:"p"},"session"),", the ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterPoliciesMemory")," function\nregisters the policies to be used by Glasswall when processing files.\n",Object(r.b)("strong",{parentName:"p"},"policies")," is a pointer to the policies data, ",Object(r.b)("strong",{parentName:"p"},"policiesLength"),"\nspecifies the size in bytes of the policies data, and ",Object(r.b)("strong",{parentName:"p"},"policiesFormat"),"\nspecifies the format of the policies data."),Object(r.b)("p",null,"If neither ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterPoliciesFile")," or ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterPoliciesMemory"),"\nis registered with a session, the default policies will be applied to\nthat session."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),"#include \"glasswall.core2.api.h\"\n\nSession session = GW2OpenSession();\nchar *policies = NULL;\nsize_t size = 0;\nif (!session)\n    /* deal with error */\nelse\n{\n    /* ... load 'policies' with a pointer to the policies content ... */\n    if (GW2RegisterPoliciesMemory(session, policies, size, PF_XML))\n        /* deal with error */\n    else\n        /* continue processing */\n}\n\n. . .\n\n/* later */\nif (GW2CloseSession(session))\n    /* error closing session */\n")),Object(r.b)("h4",{id:"3223-the-gw2registerreportfile-function"},"3.2.23 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RegisterReportFile")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RegisterReportFile(Session session, const char *reportFilePathName);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"For session ",Object(r.b)("strong",{parentName:"p"},"session"),", the ",Object(r.b)("strong",{parentName:"p"},"GW2RegisterReportFile")," function\nregisters the name of the file where the engineering log file is to be\nplaced. The name is the string pointed to by ",Object(r.b)("strong",{parentName:"p"},"reportFilePathName"),"."),Object(r.b)("h4",{id:"3224-the-gw2runsession-function"},"3.2.24 The ",Object(r.b)("strong",{parentName:"h4"},"GW2RunSession")," Function"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Synopsis")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\nint GW2RunSession(Session session);\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Description")),Object(r.b)("p",null,"The ",Object(r.b)("strong",{parentName:"p"},"GW2RunSession")," function runs session ",Object(r.b)("strong",{parentName:"p"},"session"),", using all the\npreviously registered artifacts."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Example")),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),'#include "glasswall.core2.api.h"\n\nHANDLE session = GW2OpenSession();\nif (!session)\n    /* deal with error */\nelse\n{\n    /* ... register other artifacts ... */\n    if (GW2RunSession(session))\n        /* error running the session */\n}\n\n/* later */\nif (GW2CloseSession(session))\n    /* error closing session */\n')),Object(r.b)("h2",{id:"4-editor-api-function-call-summary"},Object(r.b)("strong",{parentName:"h2"},"4 Editor A.P.I. Function Call Summary")),Object(r.b)("p",null,"The table below lists all the Core 2 API registration functions. Each\nrow specifies a File Storage Mode and Process Mode. The API functions\nto call to activate them for a session are indicated with 'Y'. The\nreport file and policies can be applied to any mode, and an analysis\nreport can be requested during Import and Export as well."),Object(r.b)("p",null,"The API functions ",Object(r.b)("strong",{parentName:"p"},"GW2OpenSession"),", ",Object(r.b)("strong",{parentName:"p"},"GW2RunSession"),", and ",Object(r.b)("strong",{parentName:"p"},"GW2CloseSession")," are not\nshown because they are common to the use of all sessions."),Object(r.b)("p",null,Object(r.b)("img",{src:n(466).default})),Object(r.b)("h2",{id:"5-summary-of-api-functions"},"5 Summary of A.P.I. Functions"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{}),"int GW2CloseSession(Session session);\nft_t GW2DetermineFileTypeFromFile(const char *path);\nft_t GW2DetermineFileTypeFromMemory(const char *inputFileBuffer, size_t inputLength);\nint GW2FileErrorMsg(Session session, char **errorMsgBuffer, size_t *errorMsgBufferLength);\nint GW2FileSessionStatus(Session session, int *glasswallSessionStatus, char **statusMsgBuffer, size_t *statusbufferLength);\nint GW2GetAllIdInfo(Session session, size_t *bufferLength, char **outputBuffer);\nint GW2GetIdInfo(Session session, size_t issueId, size_t *bufferLength, char **outputBuffer);\nint GW2GetPolicySettings(Session session, char **policiesBuffer, size_t *policiesLength, Policy_format format);\nconst char *GW2LibVersion(void);\nSession GW2OpenSession(void);\nint GW2RegisterAnalysisFile(Session session, const char *analysisFilePathName, Analysis_format format);\nint GW2RegisterAnalysisMemory(Session session, char **analysisFileBuffer, size_t *analysisoutputLength, Analysis_format format);\nint GW2RegisterExportFile(Session session, const char *exportFilePath);\nint GW2RegisterExportMemory(Session session, char **exportFileBuffer, size_t *exportLength);\nint GW2RegisterImportFile(Session session, const char *importFilePath);\nint GW2RegisterImportMemory(Session session, char *importFileBuffer, size_t importLength);\nint GW2RegisterInputFile(Session session, const char *inputFilePath);\nint GW2RegisterInputMemory(Session session, const char *inputFileBuffer, size_t inputLength);\nint GW2RegisterOutFile(Session session, const char *outputFilePath);\nint GW2RegisterOutputMemory(Session session, char **outputBuffer, size_t *outputLength);\nint GW2RegisterPoliciesFile(Session session, const char *filename, Policy_format format);\nint GW2RegisterPoliciesMemory(Session session, char *policies, size_t policiesLength, Policy_format format);\nint GW2RegisterReportFile(Session session, const char *reportFilePathName);\nint GW2RunSession(Session session);\n")))}p.isMDXComponent=!0},284:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var s=n(0),i=n.n(s);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,s,i=function(e,t){if(null==e)return{};var n,s,i={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},h=i.a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),b=p(n),h=s,m=b["".concat(o,".").concat(h)]||b[h]||u[h]||r;return n?i.a.createElement(m,a(a({ref:t},c),{},{components:n})):i.a.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=h;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:s,o[1]=a;for(var c=2;c<r;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},466:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/core_2_api_function_call_summary-14f6ea1b5400d63b2825bfc44727e8d5.PNG"}}]);