(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{289:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return _}));var n=r(0),a=r.n(n);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=a.a.createContext({}),c=function(e){var t=a.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(r),b=n,_=u["".concat(l,".").concat(b)]||u[b]||d[b]||s;return r?a.a.createElement(_,i(i({ref:t},p),{},{components:r})):a.a.createElement(_,i({ref:t},p))}));function _(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,l=new Array(s);l[0]=b;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var p=2;p<s;p++)l[p]=r[p];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},81:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return l})),r.d(t,"metadata",(function(){return i})),r.d(t,"rightToc",(function(){return o})),r.d(t,"default",(function(){return c}));var n=r(2),a=r(6),s=(r(0),r(289)),l={title:"2.2.6.2.2 Python",sidebar_label:"2.2.6.2.2 Python"},i={unversionedId:"2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_2-sdk_wrappers/2_2_6_2_2-python",id:"2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_2-sdk_wrappers/2_2_6_2_2-python",isDocsHomePage:!1,title:"2.2.6.2.2 Python",description:"Purpose",source:"@site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_2-sdk_wrappers/2_2_6_2_2-python.md",slug:"/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_2-sdk_wrappers/2_2_6_2_2-python",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_2-sdk_wrappers/2_2_6_2_2-python",version:"current",sidebar_label:"2.2.6.2.2 Python",sidebar:"someSidebar",previous:{title:"2.2.6.2.1 Introduction",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_2-sdk_wrappers/2_2_6_2_1-introduction"},next:{title:"2.2.6.2.3 JavaScript",permalink:"/glasswall-sdk-site/docs/2-glasswall_core/2_2-glasswall_editor/2_2_6-sdk/2_2_6_2-sdk_wrappers/2_2_6_2_3-javascript"}},o=[{value:"Purpose",id:"purpose",children:[]},{value:"General Requirements",id:"general-requirements",children:[]},{value:"Test Application Overview",id:"test-application-overview",children:[]},{value:"Python Wrapper",id:"python-wrapper",children:[{value:"Environment",id:"environment",children:[]},{value:"Example Code",id:"example-code",children:[]}]}],p={rightToc:o};function c(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"purpose"},"Purpose"),Object(s.b)("p",null,"The purpose of the wrappers is to expose the Core 2 SDK functionality through Python, C#, JavaScript and Java."),Object(s.b)("p",null,"Each wrapper consists of:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"The wrapper itself: a bridge between the Core 2 SDK and the desired language."),Object(s.b)("li",{parentName:"ul"},"A series of supporting files (language dependent).")),Object(s.b)("h2",{id:"general-requirements"},"General Requirements"),Object(s.b)("p",null,"The following general requirements must be met to use the wrappers and their test apps:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"The Glasswall Core 2 libraries and their dependencies",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"glasswall","_","core2.dll"),Object(s.b)("li",{parentName:"ul"},"*","_","camera.dll"))),Object(s.b)("li",{parentName:"ul"},"A designated folder containing files to be input into Core 2"),Object(s.b)("li",{parentName:"ul"},"A designated folder to hold the output from Core 2"),Object(s.b)("li",{parentName:"ul"},"A policy file to modify the default Core 2 file processing behaviour"),Object(s.b)("li",{parentName:"ul"},"The wrapper itself.")),Object(s.b)("h2",{id:"test-application-overview"},"Test Application Overview"),Object(s.b)("p",null,"Each wrapper is provided with a test application. This application is designed to call each of the Core2 APIs from the chosen language and generate a log file of the results.\nThe execution steps are:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"All supporting files, folders and dependencies are checked"),Object(s.b)("li",{parentName:"ul"},"The contents of the output directory are erased in preparation for file processing"),Object(s.b)("li",{parentName:"ul"},"For each file in the input directory:",Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},"A new folder is created in the output directory and is named for the file currently being processed"),Object(s.b)("li",{parentName:"ul"},"A series of 23 tests are performed, as detailed in the Wrapper Test Calls document"),Object(s.b)("li",{parentName:"ul"},"The files generated by Glasswall are saved in the specified output directory"),Object(s.b)("li",{parentName:"ul"},"A log file detailing the result of each test is generated and saved as local","_","process","_","log.txt"))),Object(s.b)("li",{parentName:"ul"},"When all files have been processed, a final log file named process","_","log.txt is saved in the root of the output directory.")),Object(s.b)("h2",{id:"python-wrapper"},"Python Wrapper"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"This has been tested on Python 3.6 and Python 2.7.")),Object(s.b)("h3",{id:"environment"},"Environment"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"You need to ensure that you have the Glasswall.py wrapper file accessible."),Object(s.b)("li",{parentName:"ul"},"Ensure the Core 2 libraries and all required folders are accessible to the wrapper.")),Object(s.b)("h3",{id:"example-code"},"Example Code"),Object(s.b)("p",null,"The following code uses the Python wrapper to process a file and place the managed file in a buffer. A policy file is specified, and an analysis report is generated. Note that the memory buffer is non-persistent and will have to be processed, analysed, or stored, before the script finishes. The policies file, config","_","sanitise.xml, will be placed in the specified directory."),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from Glasswall import Glasswall\nimport ctypes as ct\n \n class PythonWrapper:\n     buffer = ct.c_void_p()\n     buffer_length = ct.c_size_t()\n \n    # create Glasswall object.\n     gw = Glasswall(r'e:\\Core2_dlls')\n \n    # open session\n     session_id = gw.open_session()\n \n    # register inputfile\n     return_status = gw.register_input_file(session_id, r'e:\\Input\\A.xlsx')\n \n    # register outputmemory: the processed data is non-persistent\n     return_status = gw.register_output_memory(session_id, buffer, buffer_length)\n \n    # register policies file\n     return_status = gw.register_policies_file(session_id, r'e:\\Config\\ config_sanitise.xml', 0)\n \n    # register analysis file\n     return_status = gw.register_analysis_file(session_id, r'e:\\Output\\Analysis.xml')\n \n    # run the session\n     return_status = gw.run_session(session_id)\n \n    # close the session\n     return_status = gw.close_session(session_id)\n\n")))}c.isMDXComponent=!0}}]);